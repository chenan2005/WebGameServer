// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common/iod_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace iod {
namespace pb {
namespace common {

namespace {

const ::google::protobuf::Descriptor* base_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  base_msg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2fiod_5fcommon_2eproto() {
  protobuf_AddDesc_common_2fiod_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common/iod_common.proto");
  GOOGLE_CHECK(file != NULL);
  base_msg_descriptor_ = file->message_type(0);
  static const int base_msg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_msg, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_msg, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_msg, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_msg, messge_id_),
  };
  base_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      base_msg_descriptor_,
      base_msg::default_instance_,
      base_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_msg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_msg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(base_msg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2fiod_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    base_msg_descriptor_, &base_msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2fiod_5fcommon_2eproto() {
  delete base_msg::default_instance_;
  delete base_msg_reflection_;
}

void protobuf_AddDesc_common_2fiod_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027common/iod_common.proto\022\021com.iod.pb.co"
    "mmon\"N\n\010base_msg\022\014\n\004from\030\001 \001(\021\022\n\n\002to\030\002 \001"
    "(\021\022\r\n\005flags\030\003 \001(\021\022\021\n\tmessge_id\030\004 \002(\021*\006\010\350"
    "\007\020\221N", 124);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/iod_common.proto", &protobuf_RegisterTypes);
  base_msg::default_instance_ = new base_msg();
  base_msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2fiod_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2fiod_5fcommon_2eproto {
  StaticDescriptorInitializer_common_2fiod_5fcommon_2eproto() {
    protobuf_AddDesc_common_2fiod_5fcommon_2eproto();
  }
} static_descriptor_initializer_common_2fiod_5fcommon_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int base_msg::kFromFieldNumber;
const int base_msg::kToFieldNumber;
const int base_msg::kFlagsFieldNumber;
const int base_msg::kMessgeIdFieldNumber;
#endif  // !_MSC_VER

base_msg::base_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void base_msg::InitAsDefaultInstance() {
}

base_msg::base_msg(const base_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void base_msg::SharedCtor() {
  _cached_size_ = 0;
  from_ = 0;
  to_ = 0;
  flags_ = 0;
  messge_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

base_msg::~base_msg() {
  SharedDtor();
}

void base_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void base_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* base_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return base_msg_descriptor_;
}

const base_msg& base_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fiod_5fcommon_2eproto();  return *default_instance_;
}

base_msg* base_msg::default_instance_ = NULL;

base_msg* base_msg::New() const {
  return new base_msg;
}

void base_msg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_ = 0;
    to_ = 0;
    flags_ = 0;
    messge_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool base_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to;
        break;
      }
      
      // optional sint32 to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }
      
      // optional sint32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_messge_id;
        break;
      }
      
      // required sint32 messge_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messge_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &messge_id_)));
          set_has_messge_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag && tag < 80008u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void base_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->from(), output);
  }
  
  // optional sint32 to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->to(), output);
  }
  
  // optional sint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->flags(), output);
  }
  
  // required sint32 messge_id = 4;
  if (has_messge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->messge_id(), output);
  }
  
  // Extension range [1000, 10001)
  _extensions_.SerializeWithCachedSizes(
      1000, 10001, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* base_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->from(), target);
  }
  
  // optional sint32 to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->to(), target);
  }
  
  // optional sint32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->flags(), target);
  }
  
  // required sint32 messge_id = 4;
  if (has_messge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->messge_id(), target);
  }
  
  // Extension range [1000, 10001)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 10001, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int base_msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->from());
    }
    
    // optional sint32 to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->to());
    }
    
    // optional sint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->flags());
    }
    
    // required sint32 messge_id = 4;
    if (has_messge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->messge_id());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void base_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const base_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const base_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void base_msg::MergeFrom(const base_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_messge_id()) {
      set_messge_id(from.messge_id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void base_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void base_msg::CopyFrom(const base_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool base_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void base_msg::Swap(base_msg* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(flags_, other->flags_);
    std::swap(messge_id_, other->messge_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata base_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = base_msg_descriptor_;
  metadata.reflection = base_msg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace pb
}  // namespace iod
}  // namespace com

// @@protoc_insertion_point(global_scope)
