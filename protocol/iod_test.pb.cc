// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "iod_test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace iod {
namespace pb {
namespace test {

namespace {

const ::google::protobuf::Descriptor* req_authentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  req_authentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* res_authentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  res_authentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* req_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  req_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* res_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  res_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* req_test_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  req_test_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* res_test_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  res_test_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* req_logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  req_logout_reflection_ = NULL;
const ::google::protobuf::Descriptor* req_test_response_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  req_test_response_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* res_test_response_time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  res_test_response_time_reflection_ = NULL;
const ::google::protobuf::Descriptor* notify_kickout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  notify_kickout_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_1_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_2_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_3_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_4_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_5_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_5_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_6_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_6_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_7_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_7_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_8_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_8_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_9_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_9_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_10_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_10_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_11_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_11_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_12_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_12_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_13_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_13_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_14_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_14_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_15_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_15_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_16_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_16_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_17_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_17_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_18_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_18_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_19_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_19_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_20_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_20_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_iod_5ftest_2eproto() {
  protobuf_AddDesc_iod_5ftest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "iod_test.proto");
  GOOGLE_CHECK(file != NULL);
  req_authentication_descriptor_ = file->message_type(0);
  static const int req_authentication_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_authentication, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_authentication, authentication_),
  };
  req_authentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      req_authentication_descriptor_,
      req_authentication::default_instance_,
      req_authentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_authentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_authentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(req_authentication));
  res_authentication_descriptor_ = file->message_type(1);
  static const int res_authentication_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_authentication, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_authentication, authorization_),
  };
  res_authentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      res_authentication_descriptor_,
      res_authentication::default_instance_,
      res_authentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_authentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_authentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(res_authentication));
  req_login_descriptor_ = file->message_type(2);
  static const int req_login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_login, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_login, authorization_),
  };
  req_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      req_login_descriptor_,
      req_login::default_instance_,
      req_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(req_login));
  res_login_descriptor_ = file->message_type(3);
  static const int res_login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_login, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_login, result_),
  };
  res_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      res_login_descriptor_,
      res_login::default_instance_,
      res_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(res_login));
  req_test_info_descriptor_ = file->message_type(4);
  static const int req_test_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_test_info, info_),
  };
  req_test_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      req_test_info_descriptor_,
      req_test_info::default_instance_,
      req_test_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_test_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_test_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(req_test_info));
  res_test_info_descriptor_ = file->message_type(5);
  static const int res_test_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_test_info, info_),
  };
  res_test_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      res_test_info_descriptor_,
      res_test_info::default_instance_,
      res_test_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_test_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_test_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(res_test_info));
  req_logout_descriptor_ = file->message_type(6);
  static const int req_logout_offsets_[1] = {
  };
  req_logout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      req_logout_descriptor_,
      req_logout::default_instance_,
      req_logout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_logout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_logout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(req_logout));
  req_test_response_time_descriptor_ = file->message_type(7);
  static const int req_test_response_time_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_test_response_time, req_timestamp_),
  };
  req_test_response_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      req_test_response_time_descriptor_,
      req_test_response_time::default_instance_,
      req_test_response_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_test_response_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_test_response_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(req_test_response_time));
  res_test_response_time_descriptor_ = file->message_type(8);
  static const int res_test_response_time_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_test_response_time, req_timestamp_),
  };
  res_test_response_time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      res_test_response_time_descriptor_,
      res_test_response_time::default_instance_,
      res_test_response_time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_test_response_time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(res_test_response_time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(res_test_response_time));
  notify_kickout_descriptor_ = file->message_type(9);
  static const int notify_kickout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_kickout, kick_reason_),
  };
  notify_kickout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      notify_kickout_descriptor_,
      notify_kickout::default_instance_,
      notify_kickout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_kickout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_kickout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(notify_kickout));
  test_msg_1_descriptor_ = file->message_type(10);
  static const int test_msg_1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_1, test_data_),
  };
  test_msg_1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_1_descriptor_,
      test_msg_1::default_instance_,
      test_msg_1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_1));
  test_msg_2_descriptor_ = file->message_type(11);
  static const int test_msg_2_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_2, test_data_),
  };
  test_msg_2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_2_descriptor_,
      test_msg_2::default_instance_,
      test_msg_2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_2));
  test_msg_3_descriptor_ = file->message_type(12);
  static const int test_msg_3_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_3, test_data_),
  };
  test_msg_3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_3_descriptor_,
      test_msg_3::default_instance_,
      test_msg_3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_3));
  test_msg_4_descriptor_ = file->message_type(13);
  static const int test_msg_4_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_4, test_data_),
  };
  test_msg_4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_4_descriptor_,
      test_msg_4::default_instance_,
      test_msg_4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_4));
  test_msg_5_descriptor_ = file->message_type(14);
  static const int test_msg_5_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_5, test_data_),
  };
  test_msg_5_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_5_descriptor_,
      test_msg_5::default_instance_,
      test_msg_5_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_5, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_5, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_5));
  test_msg_6_descriptor_ = file->message_type(15);
  static const int test_msg_6_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_6, test_data_),
  };
  test_msg_6_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_6_descriptor_,
      test_msg_6::default_instance_,
      test_msg_6_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_6, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_6, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_6));
  test_msg_7_descriptor_ = file->message_type(16);
  static const int test_msg_7_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_7, test_data_),
  };
  test_msg_7_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_7_descriptor_,
      test_msg_7::default_instance_,
      test_msg_7_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_7, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_7, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_7));
  test_msg_8_descriptor_ = file->message_type(17);
  static const int test_msg_8_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_8, test_data_),
  };
  test_msg_8_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_8_descriptor_,
      test_msg_8::default_instance_,
      test_msg_8_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_8, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_8, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_8));
  test_msg_9_descriptor_ = file->message_type(18);
  static const int test_msg_9_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_9, test_data_),
  };
  test_msg_9_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_9_descriptor_,
      test_msg_9::default_instance_,
      test_msg_9_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_9, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_9, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_9));
  test_msg_10_descriptor_ = file->message_type(19);
  static const int test_msg_10_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_10, test_data_),
  };
  test_msg_10_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_10_descriptor_,
      test_msg_10::default_instance_,
      test_msg_10_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_10, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_10, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_10));
  test_msg_11_descriptor_ = file->message_type(20);
  static const int test_msg_11_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_11, test_data_),
  };
  test_msg_11_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_11_descriptor_,
      test_msg_11::default_instance_,
      test_msg_11_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_11, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_11, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_11));
  test_msg_12_descriptor_ = file->message_type(21);
  static const int test_msg_12_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_12, test_data_),
  };
  test_msg_12_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_12_descriptor_,
      test_msg_12::default_instance_,
      test_msg_12_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_12, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_12, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_12));
  test_msg_13_descriptor_ = file->message_type(22);
  static const int test_msg_13_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_13, test_data_),
  };
  test_msg_13_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_13_descriptor_,
      test_msg_13::default_instance_,
      test_msg_13_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_13, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_13, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_13));
  test_msg_14_descriptor_ = file->message_type(23);
  static const int test_msg_14_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_14, test_data_),
  };
  test_msg_14_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_14_descriptor_,
      test_msg_14::default_instance_,
      test_msg_14_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_14, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_14, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_14));
  test_msg_15_descriptor_ = file->message_type(24);
  static const int test_msg_15_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_15, test_data_),
  };
  test_msg_15_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_15_descriptor_,
      test_msg_15::default_instance_,
      test_msg_15_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_15, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_15, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_15));
  test_msg_16_descriptor_ = file->message_type(25);
  static const int test_msg_16_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_16, test_data_),
  };
  test_msg_16_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_16_descriptor_,
      test_msg_16::default_instance_,
      test_msg_16_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_16, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_16, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_16));
  test_msg_17_descriptor_ = file->message_type(26);
  static const int test_msg_17_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_17, test_data_),
  };
  test_msg_17_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_17_descriptor_,
      test_msg_17::default_instance_,
      test_msg_17_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_17, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_17, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_17));
  test_msg_18_descriptor_ = file->message_type(27);
  static const int test_msg_18_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_18, test_data_),
  };
  test_msg_18_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_18_descriptor_,
      test_msg_18::default_instance_,
      test_msg_18_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_18, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_18, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_18));
  test_msg_19_descriptor_ = file->message_type(28);
  static const int test_msg_19_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_19, test_data_),
  };
  test_msg_19_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_19_descriptor_,
      test_msg_19::default_instance_,
      test_msg_19_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_19, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_19, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_19));
  test_msg_20_descriptor_ = file->message_type(29);
  static const int test_msg_20_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_20, test_data_),
  };
  test_msg_20_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_20_descriptor_,
      test_msg_20::default_instance_,
      test_msg_20_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_20, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_20, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_20));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_iod_5ftest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    req_authentication_descriptor_, &req_authentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    res_authentication_descriptor_, &res_authentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    req_login_descriptor_, &req_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    res_login_descriptor_, &res_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    req_test_info_descriptor_, &req_test_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    res_test_info_descriptor_, &res_test_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    req_logout_descriptor_, &req_logout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    req_test_response_time_descriptor_, &req_test_response_time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    res_test_response_time_descriptor_, &res_test_response_time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    notify_kickout_descriptor_, &notify_kickout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_1_descriptor_, &test_msg_1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_2_descriptor_, &test_msg_2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_3_descriptor_, &test_msg_3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_4_descriptor_, &test_msg_4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_5_descriptor_, &test_msg_5::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_6_descriptor_, &test_msg_6::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_7_descriptor_, &test_msg_7::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_8_descriptor_, &test_msg_8::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_9_descriptor_, &test_msg_9::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_10_descriptor_, &test_msg_10::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_11_descriptor_, &test_msg_11::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_12_descriptor_, &test_msg_12::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_13_descriptor_, &test_msg_13::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_14_descriptor_, &test_msg_14::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_15_descriptor_, &test_msg_15::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_16_descriptor_, &test_msg_16::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_17_descriptor_, &test_msg_17::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_18_descriptor_, &test_msg_18::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_19_descriptor_, &test_msg_19::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_20_descriptor_, &test_msg_20::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_iod_5ftest_2eproto() {
  delete req_authentication::default_instance_;
  delete req_authentication_reflection_;
  delete res_authentication::default_instance_;
  delete res_authentication_reflection_;
  delete req_login::default_instance_;
  delete req_login_reflection_;
  delete res_login::default_instance_;
  delete res_login_reflection_;
  delete req_test_info::default_instance_;
  delete req_test_info_reflection_;
  delete res_test_info::default_instance_;
  delete res_test_info_reflection_;
  delete req_logout::default_instance_;
  delete req_logout_reflection_;
  delete req_test_response_time::default_instance_;
  delete req_test_response_time_reflection_;
  delete res_test_response_time::default_instance_;
  delete res_test_response_time_reflection_;
  delete notify_kickout::default_instance_;
  delete notify_kickout_reflection_;
  delete test_msg_1::default_instance_;
  delete test_msg_1_reflection_;
  delete test_msg_2::default_instance_;
  delete test_msg_2_reflection_;
  delete test_msg_3::default_instance_;
  delete test_msg_3_reflection_;
  delete test_msg_4::default_instance_;
  delete test_msg_4_reflection_;
  delete test_msg_5::default_instance_;
  delete test_msg_5_reflection_;
  delete test_msg_6::default_instance_;
  delete test_msg_6_reflection_;
  delete test_msg_7::default_instance_;
  delete test_msg_7_reflection_;
  delete test_msg_8::default_instance_;
  delete test_msg_8_reflection_;
  delete test_msg_9::default_instance_;
  delete test_msg_9_reflection_;
  delete test_msg_10::default_instance_;
  delete test_msg_10_reflection_;
  delete test_msg_11::default_instance_;
  delete test_msg_11_reflection_;
  delete test_msg_12::default_instance_;
  delete test_msg_12_reflection_;
  delete test_msg_13::default_instance_;
  delete test_msg_13_reflection_;
  delete test_msg_14::default_instance_;
  delete test_msg_14_reflection_;
  delete test_msg_15::default_instance_;
  delete test_msg_15_reflection_;
  delete test_msg_16::default_instance_;
  delete test_msg_16_reflection_;
  delete test_msg_17::default_instance_;
  delete test_msg_17_reflection_;
  delete test_msg_18::default_instance_;
  delete test_msg_18_reflection_;
  delete test_msg_19::default_instance_;
  delete test_msg_19_reflection_;
  delete test_msg_20::default_instance_;
  delete test_msg_20_reflection_;
}

void protobuf_AddDesc_iod_5ftest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::iod::pb::common::protobuf_AddDesc_common_2fiod_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016iod_test.proto\022\017com.iod.pb.test\032\027commo"
    "n/iod_common.proto\"<\n\022req_authentication"
    "\022\016\n\006userid\030\001 \001(\t\022\026\n\016authentication\030\002 \001(\t"
    "\";\n\022res_authentication\022\016\n\006result\030\001 \001(\021\022\025"
    "\n\rauthorization\030\002 \001(\t\"2\n\treq_login\022\016\n\006us"
    "erid\030\001 \001(\t\022\025\n\rauthorization\030\002 \001(\t\"+\n\tres"
    "_login\022\016\n\006userid\030\001 \001(\t\022\016\n\006result\030\002 \001(\021\"\035"
    "\n\rreq_test_info\022\014\n\004info\030\001 \001(\t\"\035\n\rres_tes"
    "t_info\022\014\n\004info\030\001 \001(\t\"\014\n\nreq_logout\"/\n\026re"
    "q_test_response_time\022\025\n\rreq_timestamp\030\001 "
    "\002(\022\"/\n\026res_test_response_time\022\025\n\rreq_tim"
    "estamp\030\001 \002(\022\"%\n\016notify_kickout\022\023\n\013kick_r"
    "eason\030\001 \001(\021\"\037\n\ntest_msg_1\022\021\n\ttest_data\030\001"
    " \001(\014\"\037\n\ntest_msg_2\022\021\n\ttest_data\030\001 \001(\014\"\037\n"
    "\ntest_msg_3\022\021\n\ttest_data\030\001 \001(\014\"\037\n\ntest_m"
    "sg_4\022\021\n\ttest_data\030\001 \001(\014\"\037\n\ntest_msg_5\022\021\n"
    "\ttest_data\030\001 \001(\014\"\037\n\ntest_msg_6\022\021\n\ttest_d"
    "ata\030\001 \001(\014\"\037\n\ntest_msg_7\022\021\n\ttest_data\030\001 \001"
    "(\014\"\037\n\ntest_msg_8\022\021\n\ttest_data\030\001 \001(\014\"\037\n\nt"
    "est_msg_9\022\021\n\ttest_data\030\001 \001(\014\" \n\013test_msg"
    "_10\022\021\n\ttest_data\030\001 \001(\014\" \n\013test_msg_11\022\021\n"
    "\ttest_data\030\001 \001(\014\" \n\013test_msg_12\022\021\n\ttest_"
    "data\030\001 \001(\014\" \n\013test_msg_13\022\021\n\ttest_data\030\001"
    " \001(\014\" \n\013test_msg_14\022\021\n\ttest_data\030\001 \001(\014\" "
    "\n\013test_msg_15\022\021\n\ttest_data\030\001 \001(\014\" \n\013test"
    "_msg_16\022\021\n\ttest_data\030\001 \001(\014\" \n\013test_msg_1"
    "7\022\021\n\ttest_data\030\001 \001(\014\" \n\013test_msg_18\022\021\n\tt"
    "est_data\030\001 \001(\014\" \n\013test_msg_19\022\021\n\ttest_da"
    "ta\030\001 \001(\014\" \n\013test_msg_20\022\021\n\ttest_data\030\001 \001"
    "(\014:^\n\023_req_authentication\022\033.com.iod.pb.c"
    "ommon.base_msg\030\350\007 \001(\0132#.com.iod.pb.test."
    "req_authentication:^\n\023_res_authenticatio"
    "n\022\033.com.iod.pb.common.base_msg\030\351\007 \001(\0132#."
    "com.iod.pb.test.res_authentication:L\n\n_r"
    "eq_login\022\033.com.iod.pb.common.base_msg\030\352\007"
    " \001(\0132\032.com.iod.pb.test.req_login:L\n\n_res"
    "_login\022\033.com.iod.pb.common.base_msg\030\353\007 \001"
    "(\0132\032.com.iod.pb.test.res_login:T\n\016_req_t"
    "est_info\022\033.com.iod.pb.common.base_msg\030\354\007"
    " \001(\0132\036.com.iod.pb.test.req_test_info:T\n\016"
    "_res_test_info\022\033.com.iod.pb.common.base_"
    "msg\030\355\007 \001(\0132\036.com.iod.pb.test.res_test_in"
    "fo:N\n\013_req_logout\022\033.com.iod.pb.common.ba"
    "se_msg\030\356\007 \001(\0132\033.com.iod.pb.test.req_logo"
    "ut:f\n\027_req_test_response_time\022\033.com.iod."
    "pb.common.base_msg\030\357\007 \001(\0132\'.com.iod.pb.t"
    "est.req_test_response_time:f\n\027_res_test_"
    "response_time\022\033.com.iod.pb.common.base_m"
    "sg\030\360\007 \001(\0132\'.com.iod.pb.test.res_test_res"
    "ponse_time:V\n\017_notify_kickout\022\033.com.iod."
    "pb.common.base_msg\030\361\007 \001(\0132\037.com.iod.pb.t"
    "est.notify_kickout:N\n\013_test_msg_1\022\033.com."
    "iod.pb.common.base_msg\030\211\' \001(\0132\033.com.iod."
    "pb.test.test_msg_1:N\n\013_test_msg_2\022\033.com."
    "iod.pb.common.base_msg\030\212\' \001(\0132\033.com.iod."
    "pb.test.test_msg_2:N\n\013_test_msg_3\022\033.com."
    "iod.pb.common.base_msg\030\213\' \001(\0132\033.com.iod."
    "pb.test.test_msg_3:N\n\013_test_msg_4\022\033.com."
    "iod.pb.common.base_msg\030\214\' \001(\0132\033.com.iod."
    "pb.test.test_msg_4:N\n\013_test_msg_5\022\033.com."
    "iod.pb.common.base_msg\030\215\' \001(\0132\033.com.iod."
    "pb.test.test_msg_5:N\n\013_test_msg_6\022\033.com."
    "iod.pb.common.base_msg\030\216\' \001(\0132\033.com.iod."
    "pb.test.test_msg_6:N\n\013_test_msg_7\022\033.com."
    "iod.pb.common.base_msg\030\217\' \001(\0132\033.com.iod."
    "pb.test.test_msg_7:N\n\013_test_msg_8\022\033.com."
    "iod.pb.common.base_msg\030\220\' \001(\0132\033.com.iod."
    "pb.test.test_msg_8:N\n\013_test_msg_9\022\033.com."
    "iod.pb.common.base_msg\030\221\' \001(\0132\033.com.iod."
    "pb.test.test_msg_9:P\n\014_test_msg_10\022\033.com"
    ".iod.pb.common.base_msg\030\222\' \001(\0132\034.com.iod"
    ".pb.test.test_msg_10:P\n\014_test_msg_11\022\033.c"
    "om.iod.pb.common.base_msg\030\223\' \001(\0132\034.com.i"
    "od.pb.test.test_msg_11:P\n\014_test_msg_12\022\033"
    ".com.iod.pb.common.base_msg\030\224\' \001(\0132\034.com"
    ".iod.pb.test.test_msg_12:P\n\014_test_msg_13"
    "\022\033.com.iod.pb.common.base_msg\030\225\' \001(\0132\034.c"
    "om.iod.pb.test.test_msg_13:P\n\014_test_msg_"
    "14\022\033.com.iod.pb.common.base_msg\030\226\' \001(\0132\034"
    ".com.iod.pb.test.test_msg_14:P\n\014_test_ms"
    "g_15\022\033.com.iod.pb.common.base_msg\030\227\' \001(\013"
    "2\034.com.iod.pb.test.test_msg_15:P\n\014_test_"
    "msg_16\022\033.com.iod.pb.common.base_msg\030\230\' \001"
    "(\0132\034.com.iod.pb.test.test_msg_16:P\n\014_tes"
    "t_msg_17\022\033.com.iod.pb.common.base_msg\030\231\'"
    " \001(\0132\034.com.iod.pb.test.test_msg_17:P\n\014_t"
    "est_msg_18\022\033.com.iod.pb.common.base_msg\030"
    "\232\' \001(\0132\034.com.iod.pb.test.test_msg_18:P\n\014"
    "_test_msg_19\022\033.com.iod.pb.common.base_ms"
    "g\030\233\' \001(\0132\034.com.iod.pb.test.test_msg_19:P"
    "\n\014_test_msg_20\022\033.com.iod.pb.common.base_"
    "msg\030\234\' \001(\0132\034.com.iod.pb.test.test_msg_20", 3680);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "iod_test.proto", &protobuf_RegisterTypes);
  req_authentication::default_instance_ = new req_authentication();
  res_authentication::default_instance_ = new res_authentication();
  req_login::default_instance_ = new req_login();
  res_login::default_instance_ = new res_login();
  req_test_info::default_instance_ = new req_test_info();
  res_test_info::default_instance_ = new res_test_info();
  req_logout::default_instance_ = new req_logout();
  req_test_response_time::default_instance_ = new req_test_response_time();
  res_test_response_time::default_instance_ = new res_test_response_time();
  notify_kickout::default_instance_ = new notify_kickout();
  test_msg_1::default_instance_ = new test_msg_1();
  test_msg_2::default_instance_ = new test_msg_2();
  test_msg_3::default_instance_ = new test_msg_3();
  test_msg_4::default_instance_ = new test_msg_4();
  test_msg_5::default_instance_ = new test_msg_5();
  test_msg_6::default_instance_ = new test_msg_6();
  test_msg_7::default_instance_ = new test_msg_7();
  test_msg_8::default_instance_ = new test_msg_8();
  test_msg_9::default_instance_ = new test_msg_9();
  test_msg_10::default_instance_ = new test_msg_10();
  test_msg_11::default_instance_ = new test_msg_11();
  test_msg_12::default_instance_ = new test_msg_12();
  test_msg_13::default_instance_ = new test_msg_13();
  test_msg_14::default_instance_ = new test_msg_14();
  test_msg_15::default_instance_ = new test_msg_15();
  test_msg_16::default_instance_ = new test_msg_16();
  test_msg_17::default_instance_ = new test_msg_17();
  test_msg_18::default_instance_ = new test_msg_18();
  test_msg_19::default_instance_ = new test_msg_19();
  test_msg_20::default_instance_ = new test_msg_20();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    1000, 11, false, false,
    &::com::iod::pb::test::req_authentication::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    1001, 11, false, false,
    &::com::iod::pb::test::res_authentication::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    1002, 11, false, false,
    &::com::iod::pb::test::req_login::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    1003, 11, false, false,
    &::com::iod::pb::test::res_login::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    1004, 11, false, false,
    &::com::iod::pb::test::req_test_info::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    1005, 11, false, false,
    &::com::iod::pb::test::res_test_info::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    1006, 11, false, false,
    &::com::iod::pb::test::req_logout::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    1007, 11, false, false,
    &::com::iod::pb::test::req_test_response_time::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    1008, 11, false, false,
    &::com::iod::pb::test::res_test_response_time::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    1009, 11, false, false,
    &::com::iod::pb::test::notify_kickout::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5001, 11, false, false,
    &::com::iod::pb::test::test_msg_1::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5002, 11, false, false,
    &::com::iod::pb::test::test_msg_2::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5003, 11, false, false,
    &::com::iod::pb::test::test_msg_3::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5004, 11, false, false,
    &::com::iod::pb::test::test_msg_4::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5005, 11, false, false,
    &::com::iod::pb::test::test_msg_5::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5006, 11, false, false,
    &::com::iod::pb::test::test_msg_6::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5007, 11, false, false,
    &::com::iod::pb::test::test_msg_7::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5008, 11, false, false,
    &::com::iod::pb::test::test_msg_8::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5009, 11, false, false,
    &::com::iod::pb::test::test_msg_9::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5010, 11, false, false,
    &::com::iod::pb::test::test_msg_10::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5011, 11, false, false,
    &::com::iod::pb::test::test_msg_11::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5012, 11, false, false,
    &::com::iod::pb::test::test_msg_12::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5013, 11, false, false,
    &::com::iod::pb::test::test_msg_13::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5014, 11, false, false,
    &::com::iod::pb::test::test_msg_14::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5015, 11, false, false,
    &::com::iod::pb::test::test_msg_15::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5016, 11, false, false,
    &::com::iod::pb::test::test_msg_16::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5017, 11, false, false,
    &::com::iod::pb::test::test_msg_17::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5018, 11, false, false,
    &::com::iod::pb::test::test_msg_18::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5019, 11, false, false,
    &::com::iod::pb::test::test_msg_19::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::base_msg::default_instance(),
    5020, 11, false, false,
    &::com::iod::pb::test::test_msg_20::default_instance());
  req_authentication::default_instance_->InitAsDefaultInstance();
  res_authentication::default_instance_->InitAsDefaultInstance();
  req_login::default_instance_->InitAsDefaultInstance();
  res_login::default_instance_->InitAsDefaultInstance();
  req_test_info::default_instance_->InitAsDefaultInstance();
  res_test_info::default_instance_->InitAsDefaultInstance();
  req_logout::default_instance_->InitAsDefaultInstance();
  req_test_response_time::default_instance_->InitAsDefaultInstance();
  res_test_response_time::default_instance_->InitAsDefaultInstance();
  notify_kickout::default_instance_->InitAsDefaultInstance();
  test_msg_1::default_instance_->InitAsDefaultInstance();
  test_msg_2::default_instance_->InitAsDefaultInstance();
  test_msg_3::default_instance_->InitAsDefaultInstance();
  test_msg_4::default_instance_->InitAsDefaultInstance();
  test_msg_5::default_instance_->InitAsDefaultInstance();
  test_msg_6::default_instance_->InitAsDefaultInstance();
  test_msg_7::default_instance_->InitAsDefaultInstance();
  test_msg_8::default_instance_->InitAsDefaultInstance();
  test_msg_9::default_instance_->InitAsDefaultInstance();
  test_msg_10::default_instance_->InitAsDefaultInstance();
  test_msg_11::default_instance_->InitAsDefaultInstance();
  test_msg_12::default_instance_->InitAsDefaultInstance();
  test_msg_13::default_instance_->InitAsDefaultInstance();
  test_msg_14::default_instance_->InitAsDefaultInstance();
  test_msg_15::default_instance_->InitAsDefaultInstance();
  test_msg_16::default_instance_->InitAsDefaultInstance();
  test_msg_17::default_instance_->InitAsDefaultInstance();
  test_msg_18::default_instance_->InitAsDefaultInstance();
  test_msg_19::default_instance_->InitAsDefaultInstance();
  test_msg_20::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_iod_5ftest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_iod_5ftest_2eproto {
  StaticDescriptorInitializer_iod_5ftest_2eproto() {
    protobuf_AddDesc_iod_5ftest_2eproto();
  }
} static_descriptor_initializer_iod_5ftest_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int req_authentication::kUseridFieldNumber;
const int req_authentication::kAuthenticationFieldNumber;
#endif  // !_MSC_VER

req_authentication::req_authentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void req_authentication::InitAsDefaultInstance() {
}

req_authentication::req_authentication(const req_authentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void req_authentication::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  authentication_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

req_authentication::~req_authentication() {
  SharedDtor();
}

void req_authentication::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (authentication_ != &::google::protobuf::internal::kEmptyString) {
    delete authentication_;
  }
  if (this != default_instance_) {
  }
}

void req_authentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_authentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return req_authentication_descriptor_;
}

const req_authentication& req_authentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

req_authentication* req_authentication::default_instance_ = NULL;

req_authentication* req_authentication::New() const {
  return new req_authentication;
}

void req_authentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_authentication()) {
      if (authentication_ != &::google::protobuf::internal::kEmptyString) {
        authentication_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool req_authentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_authentication;
        break;
      }
      
      // optional string authentication = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authentication:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authentication()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authentication().data(), this->authentication().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void req_authentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // optional string authentication = 2;
  if (has_authentication()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authentication().data(), this->authentication().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->authentication(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* req_authentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // optional string authentication = 2;
  if (has_authentication()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authentication().data(), this->authentication().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authentication(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int req_authentication::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string authentication = 2;
    if (has_authentication()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authentication());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_authentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const req_authentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const req_authentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void req_authentication::MergeFrom(const req_authentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_authentication()) {
      set_authentication(from.authentication());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void req_authentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_authentication::CopyFrom(const req_authentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_authentication::IsInitialized() const {
  
  return true;
}

void req_authentication::Swap(req_authentication* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(authentication_, other->authentication_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata req_authentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = req_authentication_descriptor_;
  metadata.reflection = req_authentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int res_authentication::kResultFieldNumber;
const int res_authentication::kAuthorizationFieldNumber;
#endif  // !_MSC_VER

res_authentication::res_authentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void res_authentication::InitAsDefaultInstance() {
}

res_authentication::res_authentication(const res_authentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void res_authentication::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  authorization_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

res_authentication::~res_authentication() {
  SharedDtor();
}

void res_authentication::SharedDtor() {
  if (authorization_ != &::google::protobuf::internal::kEmptyString) {
    delete authorization_;
  }
  if (this != default_instance_) {
  }
}

void res_authentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* res_authentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return res_authentication_descriptor_;
}

const res_authentication& res_authentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

res_authentication* res_authentication::default_instance_ = NULL;

res_authentication* res_authentication::New() const {
  return new res_authentication;
}

void res_authentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_authorization()) {
      if (authorization_ != &::google::protobuf::internal::kEmptyString) {
        authorization_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool res_authentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_authorization;
        break;
      }
      
      // optional string authorization = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authorization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorization()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authorization().data(), this->authorization().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void res_authentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }
  
  // optional string authorization = 2;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorization().data(), this->authorization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->authorization(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* res_authentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }
  
  // optional string authorization = 2;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorization().data(), this->authorization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authorization(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int res_authentication::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }
    
    // optional string authorization = 2;
    if (has_authorization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authorization());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void res_authentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const res_authentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const res_authentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void res_authentication::MergeFrom(const res_authentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_authorization()) {
      set_authorization(from.authorization());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void res_authentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void res_authentication::CopyFrom(const res_authentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool res_authentication::IsInitialized() const {
  
  return true;
}

void res_authentication::Swap(res_authentication* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(authorization_, other->authorization_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata res_authentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = res_authentication_descriptor_;
  metadata.reflection = res_authentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int req_login::kUseridFieldNumber;
const int req_login::kAuthorizationFieldNumber;
#endif  // !_MSC_VER

req_login::req_login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void req_login::InitAsDefaultInstance() {
}

req_login::req_login(const req_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void req_login::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  authorization_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

req_login::~req_login() {
  SharedDtor();
}

void req_login::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (authorization_ != &::google::protobuf::internal::kEmptyString) {
    delete authorization_;
  }
  if (this != default_instance_) {
  }
}

void req_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return req_login_descriptor_;
}

const req_login& req_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

req_login* req_login::default_instance_ = NULL;

req_login* req_login::New() const {
  return new req_login;
}

void req_login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_authorization()) {
      if (authorization_ != &::google::protobuf::internal::kEmptyString) {
        authorization_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool req_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_authorization;
        break;
      }
      
      // optional string authorization = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authorization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorization()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authorization().data(), this->authorization().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void req_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // optional string authorization = 2;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorization().data(), this->authorization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->authorization(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* req_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // optional string authorization = 2;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorization().data(), this->authorization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authorization(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int req_login::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string authorization = 2;
    if (has_authorization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authorization());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const req_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const req_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void req_login::MergeFrom(const req_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_authorization()) {
      set_authorization(from.authorization());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void req_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_login::CopyFrom(const req_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_login::IsInitialized() const {
  
  return true;
}

void req_login::Swap(req_login* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(authorization_, other->authorization_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata req_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = req_login_descriptor_;
  metadata.reflection = req_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int res_login::kUseridFieldNumber;
const int res_login::kResultFieldNumber;
#endif  // !_MSC_VER

res_login::res_login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void res_login::InitAsDefaultInstance() {
}

res_login::res_login(const res_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void res_login::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

res_login::~res_login() {
  SharedDtor();
}

void res_login::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void res_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* res_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return res_login_descriptor_;
}

const res_login& res_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

res_login* res_login::default_instance_ = NULL;

res_login* res_login::New() const {
  return new res_login;
}

void res_login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool res_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional sint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void res_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // optional sint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* res_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // optional sint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int res_login::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional sint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void res_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const res_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const res_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void res_login::MergeFrom(const res_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void res_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void res_login::CopyFrom(const res_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool res_login::IsInitialized() const {
  
  return true;
}

void res_login::Swap(res_login* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata res_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = res_login_descriptor_;
  metadata.reflection = res_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int req_test_info::kInfoFieldNumber;
#endif  // !_MSC_VER

req_test_info::req_test_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void req_test_info::InitAsDefaultInstance() {
}

req_test_info::req_test_info(const req_test_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void req_test_info::SharedCtor() {
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

req_test_info::~req_test_info() {
  SharedDtor();
}

void req_test_info::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void req_test_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_test_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return req_test_info_descriptor_;
}

const req_test_info& req_test_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

req_test_info* req_test_info::default_instance_ = NULL;

req_test_info* req_test_info::New() const {
  return new req_test_info;
}

void req_test_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool req_test_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void req_test_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* req_test_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int req_test_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_test_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const req_test_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const req_test_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void req_test_info::MergeFrom(const req_test_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void req_test_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_test_info::CopyFrom(const req_test_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_test_info::IsInitialized() const {
  
  return true;
}

void req_test_info::Swap(req_test_info* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata req_test_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = req_test_info_descriptor_;
  metadata.reflection = req_test_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int res_test_info::kInfoFieldNumber;
#endif  // !_MSC_VER

res_test_info::res_test_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void res_test_info::InitAsDefaultInstance() {
}

res_test_info::res_test_info(const res_test_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void res_test_info::SharedCtor() {
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

res_test_info::~res_test_info() {
  SharedDtor();
}

void res_test_info::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void res_test_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* res_test_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return res_test_info_descriptor_;
}

const res_test_info& res_test_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

res_test_info* res_test_info::default_instance_ = NULL;

res_test_info* res_test_info::New() const {
  return new res_test_info;
}

void res_test_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool res_test_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void res_test_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* res_test_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int res_test_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void res_test_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const res_test_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const res_test_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void res_test_info::MergeFrom(const res_test_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void res_test_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void res_test_info::CopyFrom(const res_test_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool res_test_info::IsInitialized() const {
  
  return true;
}

void res_test_info::Swap(res_test_info* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata res_test_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = res_test_info_descriptor_;
  metadata.reflection = res_test_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

req_logout::req_logout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void req_logout::InitAsDefaultInstance() {
}

req_logout::req_logout(const req_logout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void req_logout::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

req_logout::~req_logout() {
  SharedDtor();
}

void req_logout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void req_logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return req_logout_descriptor_;
}

const req_logout& req_logout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

req_logout* req_logout::default_instance_ = NULL;

req_logout* req_logout::New() const {
  return new req_logout;
}

void req_logout::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool req_logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void req_logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* req_logout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int req_logout::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_logout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const req_logout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const req_logout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void req_logout::MergeFrom(const req_logout& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void req_logout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_logout::CopyFrom(const req_logout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_logout::IsInitialized() const {
  
  return true;
}

void req_logout::Swap(req_logout* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata req_logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = req_logout_descriptor_;
  metadata.reflection = req_logout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int req_test_response_time::kReqTimestampFieldNumber;
#endif  // !_MSC_VER

req_test_response_time::req_test_response_time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void req_test_response_time::InitAsDefaultInstance() {
}

req_test_response_time::req_test_response_time(const req_test_response_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void req_test_response_time::SharedCtor() {
  _cached_size_ = 0;
  req_timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

req_test_response_time::~req_test_response_time() {
  SharedDtor();
}

void req_test_response_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void req_test_response_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_test_response_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return req_test_response_time_descriptor_;
}

const req_test_response_time& req_test_response_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

req_test_response_time* req_test_response_time::default_instance_ = NULL;

req_test_response_time* req_test_response_time::New() const {
  return new req_test_response_time;
}

void req_test_response_time::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    req_timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool req_test_response_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 req_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &req_timestamp_)));
          set_has_req_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void req_test_response_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 req_timestamp = 1;
  if (has_req_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->req_timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* req_test_response_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 req_timestamp = 1;
  if (has_req_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->req_timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int req_test_response_time::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 req_timestamp = 1;
    if (has_req_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->req_timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_test_response_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const req_test_response_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const req_test_response_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void req_test_response_time::MergeFrom(const req_test_response_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_timestamp()) {
      set_req_timestamp(from.req_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void req_test_response_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_test_response_time::CopyFrom(const req_test_response_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_test_response_time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void req_test_response_time::Swap(req_test_response_time* other) {
  if (other != this) {
    std::swap(req_timestamp_, other->req_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata req_test_response_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = req_test_response_time_descriptor_;
  metadata.reflection = req_test_response_time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int res_test_response_time::kReqTimestampFieldNumber;
#endif  // !_MSC_VER

res_test_response_time::res_test_response_time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void res_test_response_time::InitAsDefaultInstance() {
}

res_test_response_time::res_test_response_time(const res_test_response_time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void res_test_response_time::SharedCtor() {
  _cached_size_ = 0;
  req_timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

res_test_response_time::~res_test_response_time() {
  SharedDtor();
}

void res_test_response_time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void res_test_response_time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* res_test_response_time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return res_test_response_time_descriptor_;
}

const res_test_response_time& res_test_response_time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

res_test_response_time* res_test_response_time::default_instance_ = NULL;

res_test_response_time* res_test_response_time::New() const {
  return new res_test_response_time;
}

void res_test_response_time::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    req_timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool res_test_response_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 req_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &req_timestamp_)));
          set_has_req_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void res_test_response_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 req_timestamp = 1;
  if (has_req_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->req_timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* res_test_response_time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 req_timestamp = 1;
  if (has_req_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->req_timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int res_test_response_time::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 req_timestamp = 1;
    if (has_req_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->req_timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void res_test_response_time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const res_test_response_time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const res_test_response_time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void res_test_response_time::MergeFrom(const res_test_response_time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_timestamp()) {
      set_req_timestamp(from.req_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void res_test_response_time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void res_test_response_time::CopyFrom(const res_test_response_time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool res_test_response_time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void res_test_response_time::Swap(res_test_response_time* other) {
  if (other != this) {
    std::swap(req_timestamp_, other->req_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata res_test_response_time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = res_test_response_time_descriptor_;
  metadata.reflection = res_test_response_time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int notify_kickout::kKickReasonFieldNumber;
#endif  // !_MSC_VER

notify_kickout::notify_kickout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void notify_kickout::InitAsDefaultInstance() {
}

notify_kickout::notify_kickout(const notify_kickout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void notify_kickout::SharedCtor() {
  _cached_size_ = 0;
  kick_reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

notify_kickout::~notify_kickout() {
  SharedDtor();
}

void notify_kickout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void notify_kickout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* notify_kickout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notify_kickout_descriptor_;
}

const notify_kickout& notify_kickout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

notify_kickout* notify_kickout::default_instance_ = NULL;

notify_kickout* notify_kickout::New() const {
  return new notify_kickout;
}

void notify_kickout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kick_reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool notify_kickout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 kick_reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &kick_reason_)));
          set_has_kick_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void notify_kickout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 kick_reason = 1;
  if (has_kick_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->kick_reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* notify_kickout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 kick_reason = 1;
  if (has_kick_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->kick_reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int notify_kickout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 kick_reason = 1;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->kick_reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void notify_kickout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const notify_kickout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const notify_kickout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void notify_kickout::MergeFrom(const notify_kickout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kick_reason()) {
      set_kick_reason(from.kick_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void notify_kickout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notify_kickout::CopyFrom(const notify_kickout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notify_kickout::IsInitialized() const {
  
  return true;
}

void notify_kickout::Swap(notify_kickout* other) {
  if (other != this) {
    std::swap(kick_reason_, other->kick_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata notify_kickout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = notify_kickout_descriptor_;
  metadata.reflection = notify_kickout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_1::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_1::test_msg_1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_1::InitAsDefaultInstance() {
}

test_msg_1::test_msg_1(const test_msg_1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_1::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_1::~test_msg_1() {
  SharedDtor();
}

void test_msg_1::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_1_descriptor_;
}

const test_msg_1& test_msg_1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_1* test_msg_1::default_instance_ = NULL;

test_msg_1* test_msg_1::New() const {
  return new test_msg_1;
}

void test_msg_1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_1::MergeFrom(const test_msg_1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_1::CopyFrom(const test_msg_1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_1::IsInitialized() const {
  
  return true;
}

void test_msg_1::Swap(test_msg_1* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_1_descriptor_;
  metadata.reflection = test_msg_1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_2::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_2::test_msg_2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_2::InitAsDefaultInstance() {
}

test_msg_2::test_msg_2(const test_msg_2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_2::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_2::~test_msg_2() {
  SharedDtor();
}

void test_msg_2::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_2_descriptor_;
}

const test_msg_2& test_msg_2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_2* test_msg_2::default_instance_ = NULL;

test_msg_2* test_msg_2::New() const {
  return new test_msg_2;
}

void test_msg_2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_2::MergeFrom(const test_msg_2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_2::CopyFrom(const test_msg_2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_2::IsInitialized() const {
  
  return true;
}

void test_msg_2::Swap(test_msg_2* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_2_descriptor_;
  metadata.reflection = test_msg_2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_3::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_3::test_msg_3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_3::InitAsDefaultInstance() {
}

test_msg_3::test_msg_3(const test_msg_3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_3::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_3::~test_msg_3() {
  SharedDtor();
}

void test_msg_3::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_3_descriptor_;
}

const test_msg_3& test_msg_3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_3* test_msg_3::default_instance_ = NULL;

test_msg_3* test_msg_3::New() const {
  return new test_msg_3;
}

void test_msg_3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_3::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_3::MergeFrom(const test_msg_3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_3::CopyFrom(const test_msg_3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_3::IsInitialized() const {
  
  return true;
}

void test_msg_3::Swap(test_msg_3* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_3_descriptor_;
  metadata.reflection = test_msg_3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_4::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_4::test_msg_4()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_4::InitAsDefaultInstance() {
}

test_msg_4::test_msg_4(const test_msg_4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_4::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_4::~test_msg_4() {
  SharedDtor();
}

void test_msg_4::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_4_descriptor_;
}

const test_msg_4& test_msg_4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_4* test_msg_4::default_instance_ = NULL;

test_msg_4* test_msg_4::New() const {
  return new test_msg_4;
}

void test_msg_4::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_4::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_4::MergeFrom(const test_msg_4& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_4::CopyFrom(const test_msg_4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_4::IsInitialized() const {
  
  return true;
}

void test_msg_4::Swap(test_msg_4* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_4_descriptor_;
  metadata.reflection = test_msg_4_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_5::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_5::test_msg_5()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_5::InitAsDefaultInstance() {
}

test_msg_5::test_msg_5(const test_msg_5& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_5::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_5::~test_msg_5() {
  SharedDtor();
}

void test_msg_5::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_5::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_5::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_5_descriptor_;
}

const test_msg_5& test_msg_5::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_5* test_msg_5::default_instance_ = NULL;

test_msg_5* test_msg_5::New() const {
  return new test_msg_5;
}

void test_msg_5::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_5::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_5::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_5::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_5::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_5::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_5* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_5*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_5::MergeFrom(const test_msg_5& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_5::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_5::CopyFrom(const test_msg_5& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_5::IsInitialized() const {
  
  return true;
}

void test_msg_5::Swap(test_msg_5* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_5::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_5_descriptor_;
  metadata.reflection = test_msg_5_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_6::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_6::test_msg_6()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_6::InitAsDefaultInstance() {
}

test_msg_6::test_msg_6(const test_msg_6& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_6::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_6::~test_msg_6() {
  SharedDtor();
}

void test_msg_6::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_6::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_6::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_6_descriptor_;
}

const test_msg_6& test_msg_6::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_6* test_msg_6::default_instance_ = NULL;

test_msg_6* test_msg_6::New() const {
  return new test_msg_6;
}

void test_msg_6::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_6::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_6::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_6::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_6::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_6::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_6* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_6*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_6::MergeFrom(const test_msg_6& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_6::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_6::CopyFrom(const test_msg_6& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_6::IsInitialized() const {
  
  return true;
}

void test_msg_6::Swap(test_msg_6* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_6::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_6_descriptor_;
  metadata.reflection = test_msg_6_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_7::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_7::test_msg_7()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_7::InitAsDefaultInstance() {
}

test_msg_7::test_msg_7(const test_msg_7& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_7::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_7::~test_msg_7() {
  SharedDtor();
}

void test_msg_7::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_7::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_7::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_7_descriptor_;
}

const test_msg_7& test_msg_7::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_7* test_msg_7::default_instance_ = NULL;

test_msg_7* test_msg_7::New() const {
  return new test_msg_7;
}

void test_msg_7::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_7::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_7::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_7::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_7::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_7::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_7* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_7*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_7::MergeFrom(const test_msg_7& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_7::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_7::CopyFrom(const test_msg_7& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_7::IsInitialized() const {
  
  return true;
}

void test_msg_7::Swap(test_msg_7* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_7::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_7_descriptor_;
  metadata.reflection = test_msg_7_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_8::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_8::test_msg_8()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_8::InitAsDefaultInstance() {
}

test_msg_8::test_msg_8(const test_msg_8& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_8::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_8::~test_msg_8() {
  SharedDtor();
}

void test_msg_8::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_8::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_8::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_8_descriptor_;
}

const test_msg_8& test_msg_8::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_8* test_msg_8::default_instance_ = NULL;

test_msg_8* test_msg_8::New() const {
  return new test_msg_8;
}

void test_msg_8::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_8::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_8::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_8::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_8::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_8::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_8* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_8*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_8::MergeFrom(const test_msg_8& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_8::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_8::CopyFrom(const test_msg_8& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_8::IsInitialized() const {
  
  return true;
}

void test_msg_8::Swap(test_msg_8* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_8::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_8_descriptor_;
  metadata.reflection = test_msg_8_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_9::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_9::test_msg_9()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_9::InitAsDefaultInstance() {
}

test_msg_9::test_msg_9(const test_msg_9& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_9::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_9::~test_msg_9() {
  SharedDtor();
}

void test_msg_9::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_9::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_9::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_9_descriptor_;
}

const test_msg_9& test_msg_9::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_9* test_msg_9::default_instance_ = NULL;

test_msg_9* test_msg_9::New() const {
  return new test_msg_9;
}

void test_msg_9::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_9::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_9::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_9::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_9::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_9::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_9* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_9*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_9::MergeFrom(const test_msg_9& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_9::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_9::CopyFrom(const test_msg_9& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_9::IsInitialized() const {
  
  return true;
}

void test_msg_9::Swap(test_msg_9* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_9::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_9_descriptor_;
  metadata.reflection = test_msg_9_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_10::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_10::test_msg_10()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_10::InitAsDefaultInstance() {
}

test_msg_10::test_msg_10(const test_msg_10& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_10::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_10::~test_msg_10() {
  SharedDtor();
}

void test_msg_10::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_10::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_10::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_10_descriptor_;
}

const test_msg_10& test_msg_10::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_10* test_msg_10::default_instance_ = NULL;

test_msg_10* test_msg_10::New() const {
  return new test_msg_10;
}

void test_msg_10::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_10::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_10::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_10::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_10::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_10::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_10* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_10*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_10::MergeFrom(const test_msg_10& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_10::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_10::CopyFrom(const test_msg_10& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_10::IsInitialized() const {
  
  return true;
}

void test_msg_10::Swap(test_msg_10* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_10::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_10_descriptor_;
  metadata.reflection = test_msg_10_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_11::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_11::test_msg_11()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_11::InitAsDefaultInstance() {
}

test_msg_11::test_msg_11(const test_msg_11& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_11::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_11::~test_msg_11() {
  SharedDtor();
}

void test_msg_11::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_11::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_11::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_11_descriptor_;
}

const test_msg_11& test_msg_11::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_11* test_msg_11::default_instance_ = NULL;

test_msg_11* test_msg_11::New() const {
  return new test_msg_11;
}

void test_msg_11::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_11::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_11::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_11::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_11::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_11::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_11* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_11*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_11::MergeFrom(const test_msg_11& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_11::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_11::CopyFrom(const test_msg_11& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_11::IsInitialized() const {
  
  return true;
}

void test_msg_11::Swap(test_msg_11* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_11::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_11_descriptor_;
  metadata.reflection = test_msg_11_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_12::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_12::test_msg_12()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_12::InitAsDefaultInstance() {
}

test_msg_12::test_msg_12(const test_msg_12& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_12::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_12::~test_msg_12() {
  SharedDtor();
}

void test_msg_12::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_12::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_12::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_12_descriptor_;
}

const test_msg_12& test_msg_12::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_12* test_msg_12::default_instance_ = NULL;

test_msg_12* test_msg_12::New() const {
  return new test_msg_12;
}

void test_msg_12::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_12::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_12::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_12::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_12::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_12::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_12* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_12*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_12::MergeFrom(const test_msg_12& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_12::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_12::CopyFrom(const test_msg_12& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_12::IsInitialized() const {
  
  return true;
}

void test_msg_12::Swap(test_msg_12* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_12::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_12_descriptor_;
  metadata.reflection = test_msg_12_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_13::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_13::test_msg_13()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_13::InitAsDefaultInstance() {
}

test_msg_13::test_msg_13(const test_msg_13& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_13::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_13::~test_msg_13() {
  SharedDtor();
}

void test_msg_13::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_13::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_13::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_13_descriptor_;
}

const test_msg_13& test_msg_13::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_13* test_msg_13::default_instance_ = NULL;

test_msg_13* test_msg_13::New() const {
  return new test_msg_13;
}

void test_msg_13::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_13::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_13::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_13::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_13::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_13::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_13* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_13*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_13::MergeFrom(const test_msg_13& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_13::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_13::CopyFrom(const test_msg_13& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_13::IsInitialized() const {
  
  return true;
}

void test_msg_13::Swap(test_msg_13* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_13::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_13_descriptor_;
  metadata.reflection = test_msg_13_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_14::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_14::test_msg_14()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_14::InitAsDefaultInstance() {
}

test_msg_14::test_msg_14(const test_msg_14& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_14::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_14::~test_msg_14() {
  SharedDtor();
}

void test_msg_14::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_14::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_14::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_14_descriptor_;
}

const test_msg_14& test_msg_14::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_14* test_msg_14::default_instance_ = NULL;

test_msg_14* test_msg_14::New() const {
  return new test_msg_14;
}

void test_msg_14::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_14::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_14::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_14::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_14::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_14::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_14* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_14*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_14::MergeFrom(const test_msg_14& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_14::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_14::CopyFrom(const test_msg_14& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_14::IsInitialized() const {
  
  return true;
}

void test_msg_14::Swap(test_msg_14* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_14::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_14_descriptor_;
  metadata.reflection = test_msg_14_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_15::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_15::test_msg_15()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_15::InitAsDefaultInstance() {
}

test_msg_15::test_msg_15(const test_msg_15& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_15::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_15::~test_msg_15() {
  SharedDtor();
}

void test_msg_15::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_15::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_15::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_15_descriptor_;
}

const test_msg_15& test_msg_15::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_15* test_msg_15::default_instance_ = NULL;

test_msg_15* test_msg_15::New() const {
  return new test_msg_15;
}

void test_msg_15::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_15::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_15::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_15::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_15::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_15::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_15* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_15*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_15::MergeFrom(const test_msg_15& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_15::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_15::CopyFrom(const test_msg_15& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_15::IsInitialized() const {
  
  return true;
}

void test_msg_15::Swap(test_msg_15* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_15::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_15_descriptor_;
  metadata.reflection = test_msg_15_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_16::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_16::test_msg_16()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_16::InitAsDefaultInstance() {
}

test_msg_16::test_msg_16(const test_msg_16& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_16::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_16::~test_msg_16() {
  SharedDtor();
}

void test_msg_16::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_16::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_16::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_16_descriptor_;
}

const test_msg_16& test_msg_16::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_16* test_msg_16::default_instance_ = NULL;

test_msg_16* test_msg_16::New() const {
  return new test_msg_16;
}

void test_msg_16::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_16::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_16::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_16::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_16::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_16::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_16* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_16*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_16::MergeFrom(const test_msg_16& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_16::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_16::CopyFrom(const test_msg_16& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_16::IsInitialized() const {
  
  return true;
}

void test_msg_16::Swap(test_msg_16* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_16::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_16_descriptor_;
  metadata.reflection = test_msg_16_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_17::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_17::test_msg_17()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_17::InitAsDefaultInstance() {
}

test_msg_17::test_msg_17(const test_msg_17& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_17::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_17::~test_msg_17() {
  SharedDtor();
}

void test_msg_17::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_17::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_17::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_17_descriptor_;
}

const test_msg_17& test_msg_17::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_17* test_msg_17::default_instance_ = NULL;

test_msg_17* test_msg_17::New() const {
  return new test_msg_17;
}

void test_msg_17::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_17::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_17::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_17::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_17::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_17::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_17* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_17*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_17::MergeFrom(const test_msg_17& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_17::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_17::CopyFrom(const test_msg_17& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_17::IsInitialized() const {
  
  return true;
}

void test_msg_17::Swap(test_msg_17* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_17::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_17_descriptor_;
  metadata.reflection = test_msg_17_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_18::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_18::test_msg_18()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_18::InitAsDefaultInstance() {
}

test_msg_18::test_msg_18(const test_msg_18& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_18::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_18::~test_msg_18() {
  SharedDtor();
}

void test_msg_18::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_18::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_18::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_18_descriptor_;
}

const test_msg_18& test_msg_18::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_18* test_msg_18::default_instance_ = NULL;

test_msg_18* test_msg_18::New() const {
  return new test_msg_18;
}

void test_msg_18::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_18::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_18::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_18::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_18::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_18::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_18* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_18*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_18::MergeFrom(const test_msg_18& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_18::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_18::CopyFrom(const test_msg_18& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_18::IsInitialized() const {
  
  return true;
}

void test_msg_18::Swap(test_msg_18* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_18::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_18_descriptor_;
  metadata.reflection = test_msg_18_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_19::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_19::test_msg_19()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_19::InitAsDefaultInstance() {
}

test_msg_19::test_msg_19(const test_msg_19& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_19::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_19::~test_msg_19() {
  SharedDtor();
}

void test_msg_19::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_19::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_19::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_19_descriptor_;
}

const test_msg_19& test_msg_19::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_19* test_msg_19::default_instance_ = NULL;

test_msg_19* test_msg_19::New() const {
  return new test_msg_19;
}

void test_msg_19::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_19::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_19::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_19::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_19::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_19::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_19* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_19*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_19::MergeFrom(const test_msg_19& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_19::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_19::CopyFrom(const test_msg_19& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_19::IsInitialized() const {
  
  return true;
}

void test_msg_19::Swap(test_msg_19* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_19::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_19_descriptor_;
  metadata.reflection = test_msg_19_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_20::kTestDataFieldNumber;
#endif  // !_MSC_VER

test_msg_20::test_msg_20()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_20::InitAsDefaultInstance() {
}

test_msg_20::test_msg_20(const test_msg_20& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_20::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_20::~test_msg_20() {
  SharedDtor();
}

void test_msg_20::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_20::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_20::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_20_descriptor_;
}

const test_msg_20& test_msg_20::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

test_msg_20* test_msg_20::default_instance_ = NULL;

test_msg_20* test_msg_20::New() const {
  return new test_msg_20;
}

void test_msg_20::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_20::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_20::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_20::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_20::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_20::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_20* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_20*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_20::MergeFrom(const test_msg_20& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_20::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_20::CopyFrom(const test_msg_20& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_20::IsInitialized() const {
  
  return true;
}

void test_msg_20::Swap(test_msg_20* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_20::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_20_descriptor_;
  metadata.reflection = test_msg_20_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::req_authentication >, 11, false >
  _req_authentication(kReqAuthenticationFieldNumber, ::com::iod::pb::test::req_authentication::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::res_authentication >, 11, false >
  _res_authentication(kResAuthenticationFieldNumber, ::com::iod::pb::test::res_authentication::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::req_login >, 11, false >
  _req_login(kReqLoginFieldNumber, ::com::iod::pb::test::req_login::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::res_login >, 11, false >
  _res_login(kResLoginFieldNumber, ::com::iod::pb::test::res_login::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::req_test_info >, 11, false >
  _req_test_info(kReqTestInfoFieldNumber, ::com::iod::pb::test::req_test_info::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::res_test_info >, 11, false >
  _res_test_info(kResTestInfoFieldNumber, ::com::iod::pb::test::res_test_info::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::req_logout >, 11, false >
  _req_logout(kReqLogoutFieldNumber, ::com::iod::pb::test::req_logout::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::req_test_response_time >, 11, false >
  _req_test_response_time(kReqTestResponseTimeFieldNumber, ::com::iod::pb::test::req_test_response_time::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::res_test_response_time >, 11, false >
  _res_test_response_time(kResTestResponseTimeFieldNumber, ::com::iod::pb::test::res_test_response_time::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::notify_kickout >, 11, false >
  _notify_kickout(kNotifyKickoutFieldNumber, ::com::iod::pb::test::notify_kickout::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_1 >, 11, false >
  _test_msg_1(kTestMsg1FieldNumber, ::com::iod::pb::test::test_msg_1::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_2 >, 11, false >
  _test_msg_2(kTestMsg2FieldNumber, ::com::iod::pb::test::test_msg_2::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_3 >, 11, false >
  _test_msg_3(kTestMsg3FieldNumber, ::com::iod::pb::test::test_msg_3::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_4 >, 11, false >
  _test_msg_4(kTestMsg4FieldNumber, ::com::iod::pb::test::test_msg_4::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_5 >, 11, false >
  _test_msg_5(kTestMsg5FieldNumber, ::com::iod::pb::test::test_msg_5::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_6 >, 11, false >
  _test_msg_6(kTestMsg6FieldNumber, ::com::iod::pb::test::test_msg_6::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_7 >, 11, false >
  _test_msg_7(kTestMsg7FieldNumber, ::com::iod::pb::test::test_msg_7::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_8 >, 11, false >
  _test_msg_8(kTestMsg8FieldNumber, ::com::iod::pb::test::test_msg_8::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_9 >, 11, false >
  _test_msg_9(kTestMsg9FieldNumber, ::com::iod::pb::test::test_msg_9::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_10 >, 11, false >
  _test_msg_10(kTestMsg10FieldNumber, ::com::iod::pb::test::test_msg_10::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_11 >, 11, false >
  _test_msg_11(kTestMsg11FieldNumber, ::com::iod::pb::test::test_msg_11::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_12 >, 11, false >
  _test_msg_12(kTestMsg12FieldNumber, ::com::iod::pb::test::test_msg_12::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_13 >, 11, false >
  _test_msg_13(kTestMsg13FieldNumber, ::com::iod::pb::test::test_msg_13::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_14 >, 11, false >
  _test_msg_14(kTestMsg14FieldNumber, ::com::iod::pb::test::test_msg_14::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_15 >, 11, false >
  _test_msg_15(kTestMsg15FieldNumber, ::com::iod::pb::test::test_msg_15::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_16 >, 11, false >
  _test_msg_16(kTestMsg16FieldNumber, ::com::iod::pb::test::test_msg_16::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_17 >, 11, false >
  _test_msg_17(kTestMsg17FieldNumber, ::com::iod::pb::test::test_msg_17::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_18 >, 11, false >
  _test_msg_18(kTestMsg18FieldNumber, ::com::iod::pb::test::test_msg_18::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_19 >, 11, false >
  _test_msg_19(kTestMsg19FieldNumber, ::com::iod::pb::test::test_msg_19::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::base_msg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::test_msg_20 >, 11, false >
  _test_msg_20(kTestMsg20FieldNumber, ::com::iod::pb::test::test_msg_20::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace pb
}  // namespace iod
}  // namespace com

// @@protoc_insertion_point(global_scope)
