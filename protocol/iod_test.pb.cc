// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "iod_test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace iod {
namespace pb {
namespace test {

namespace {

const ::google::protobuf::Descriptor* ReqAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResTestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResTestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTestResponseTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTestResponseTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResTestResponseTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResTestResponseTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyKickout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyKickout_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg1_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg2_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg3_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg4_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg5_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg5_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg6_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg6_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg7_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg7_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg8_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg8_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg9_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg9_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg10_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg10_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg11_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg11_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg12_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg12_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg13_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg13_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg14_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg14_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg15_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg15_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg16_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg16_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg17_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg17_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg18_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg18_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg19_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg19_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg20_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg20_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_iod_5ftest_2eproto() {
  protobuf_AddDesc_iod_5ftest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "iod_test.proto");
  GOOGLE_CHECK(file != NULL);
  ReqAuthentication_descriptor_ = file->message_type(0);
  static const int ReqAuthentication_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuthentication, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuthentication, authentication_),
  };
  ReqAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAuthentication_descriptor_,
      ReqAuthentication::default_instance_,
      ReqAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAuthentication));
  ResAuthentication_descriptor_ = file->message_type(1);
  static const int ResAuthentication_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAuthentication, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAuthentication, authorization_),
  };
  ResAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResAuthentication_descriptor_,
      ResAuthentication::default_instance_,
      ResAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResAuthentication));
  ReqLogin_descriptor_ = file->message_type(2);
  static const int ReqLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, authorization_),
  };
  ReqLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLogin_descriptor_,
      ReqLogin::default_instance_,
      ReqLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLogin));
  ResLogin_descriptor_ = file->message_type(3);
  static const int ResLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin, result_),
  };
  ResLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResLogin_descriptor_,
      ResLogin::default_instance_,
      ResLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResLogin));
  ReqTestInfo_descriptor_ = file->message_type(4);
  static const int ReqTestInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTestInfo, info_),
  };
  ReqTestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTestInfo_descriptor_,
      ReqTestInfo::default_instance_,
      ReqTestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTestInfo));
  ResTestInfo_descriptor_ = file->message_type(5);
  static const int ResTestInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTestInfo, info_),
  };
  ResTestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResTestInfo_descriptor_,
      ResTestInfo::default_instance_,
      ResTestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResTestInfo));
  ReqLogout_descriptor_ = file->message_type(6);
  static const int ReqLogout_offsets_[1] = {
  };
  ReqLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLogout_descriptor_,
      ReqLogout::default_instance_,
      ReqLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLogout));
  ReqTestResponseTime_descriptor_ = file->message_type(7);
  static const int ReqTestResponseTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTestResponseTime, req_timestamp_),
  };
  ReqTestResponseTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTestResponseTime_descriptor_,
      ReqTestResponseTime::default_instance_,
      ReqTestResponseTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTestResponseTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTestResponseTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTestResponseTime));
  ResTestResponseTime_descriptor_ = file->message_type(8);
  static const int ResTestResponseTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTestResponseTime, req_timestamp_),
  };
  ResTestResponseTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResTestResponseTime_descriptor_,
      ResTestResponseTime::default_instance_,
      ResTestResponseTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTestResponseTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResTestResponseTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResTestResponseTime));
  NotifyKickout_descriptor_ = file->message_type(9);
  static const int NotifyKickout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyKickout, kick_reason_),
  };
  NotifyKickout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyKickout_descriptor_,
      NotifyKickout::default_instance_,
      NotifyKickout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyKickout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyKickout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyKickout));
  TestMsg1_descriptor_ = file->message_type(10);
  static const int TestMsg1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg1, test_data_),
  };
  TestMsg1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg1_descriptor_,
      TestMsg1::default_instance_,
      TestMsg1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg1));
  TestMsg2_descriptor_ = file->message_type(11);
  static const int TestMsg2_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg2, test_data_),
  };
  TestMsg2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg2_descriptor_,
      TestMsg2::default_instance_,
      TestMsg2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg2));
  TestMsg3_descriptor_ = file->message_type(12);
  static const int TestMsg3_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg3, test_data_),
  };
  TestMsg3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg3_descriptor_,
      TestMsg3::default_instance_,
      TestMsg3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg3));
  TestMsg4_descriptor_ = file->message_type(13);
  static const int TestMsg4_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg4, test_data_),
  };
  TestMsg4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg4_descriptor_,
      TestMsg4::default_instance_,
      TestMsg4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg4));
  TestMsg5_descriptor_ = file->message_type(14);
  static const int TestMsg5_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg5, test_data_),
  };
  TestMsg5_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg5_descriptor_,
      TestMsg5::default_instance_,
      TestMsg5_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg5, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg5, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg5));
  TestMsg6_descriptor_ = file->message_type(15);
  static const int TestMsg6_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg6, test_data_),
  };
  TestMsg6_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg6_descriptor_,
      TestMsg6::default_instance_,
      TestMsg6_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg6, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg6, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg6));
  TestMsg7_descriptor_ = file->message_type(16);
  static const int TestMsg7_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg7, test_data_),
  };
  TestMsg7_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg7_descriptor_,
      TestMsg7::default_instance_,
      TestMsg7_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg7, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg7, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg7));
  TestMsg8_descriptor_ = file->message_type(17);
  static const int TestMsg8_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg8, test_data_),
  };
  TestMsg8_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg8_descriptor_,
      TestMsg8::default_instance_,
      TestMsg8_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg8, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg8, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg8));
  TestMsg9_descriptor_ = file->message_type(18);
  static const int TestMsg9_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg9, test_data_),
  };
  TestMsg9_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg9_descriptor_,
      TestMsg9::default_instance_,
      TestMsg9_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg9, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg9, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg9));
  TestMsg10_descriptor_ = file->message_type(19);
  static const int TestMsg10_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg10, test_data_),
  };
  TestMsg10_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg10_descriptor_,
      TestMsg10::default_instance_,
      TestMsg10_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg10, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg10, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg10));
  TestMsg11_descriptor_ = file->message_type(20);
  static const int TestMsg11_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg11, test_data_),
  };
  TestMsg11_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg11_descriptor_,
      TestMsg11::default_instance_,
      TestMsg11_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg11, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg11, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg11));
  TestMsg12_descriptor_ = file->message_type(21);
  static const int TestMsg12_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg12, test_data_),
  };
  TestMsg12_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg12_descriptor_,
      TestMsg12::default_instance_,
      TestMsg12_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg12, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg12, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg12));
  TestMsg13_descriptor_ = file->message_type(22);
  static const int TestMsg13_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg13, test_data_),
  };
  TestMsg13_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg13_descriptor_,
      TestMsg13::default_instance_,
      TestMsg13_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg13, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg13, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg13));
  TestMsg14_descriptor_ = file->message_type(23);
  static const int TestMsg14_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg14, test_data_),
  };
  TestMsg14_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg14_descriptor_,
      TestMsg14::default_instance_,
      TestMsg14_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg14, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg14, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg14));
  TestMsg15_descriptor_ = file->message_type(24);
  static const int TestMsg15_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg15, test_data_),
  };
  TestMsg15_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg15_descriptor_,
      TestMsg15::default_instance_,
      TestMsg15_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg15, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg15, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg15));
  TestMsg16_descriptor_ = file->message_type(25);
  static const int TestMsg16_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg16, test_data_),
  };
  TestMsg16_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg16_descriptor_,
      TestMsg16::default_instance_,
      TestMsg16_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg16, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg16, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg16));
  TestMsg17_descriptor_ = file->message_type(26);
  static const int TestMsg17_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg17, test_data_),
  };
  TestMsg17_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg17_descriptor_,
      TestMsg17::default_instance_,
      TestMsg17_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg17, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg17, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg17));
  TestMsg18_descriptor_ = file->message_type(27);
  static const int TestMsg18_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg18, test_data_),
  };
  TestMsg18_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg18_descriptor_,
      TestMsg18::default_instance_,
      TestMsg18_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg18, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg18, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg18));
  TestMsg19_descriptor_ = file->message_type(28);
  static const int TestMsg19_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg19, test_data_),
  };
  TestMsg19_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg19_descriptor_,
      TestMsg19::default_instance_,
      TestMsg19_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg19, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg19, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg19));
  TestMsg20_descriptor_ = file->message_type(29);
  static const int TestMsg20_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg20, test_data_),
  };
  TestMsg20_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg20_descriptor_,
      TestMsg20::default_instance_,
      TestMsg20_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg20, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg20, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg20));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_iod_5ftest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAuthentication_descriptor_, &ReqAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResAuthentication_descriptor_, &ResAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLogin_descriptor_, &ReqLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResLogin_descriptor_, &ResLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTestInfo_descriptor_, &ReqTestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResTestInfo_descriptor_, &ResTestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLogout_descriptor_, &ReqLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTestResponseTime_descriptor_, &ReqTestResponseTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResTestResponseTime_descriptor_, &ResTestResponseTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyKickout_descriptor_, &NotifyKickout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg1_descriptor_, &TestMsg1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg2_descriptor_, &TestMsg2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg3_descriptor_, &TestMsg3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg4_descriptor_, &TestMsg4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg5_descriptor_, &TestMsg5::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg6_descriptor_, &TestMsg6::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg7_descriptor_, &TestMsg7::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg8_descriptor_, &TestMsg8::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg9_descriptor_, &TestMsg9::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg10_descriptor_, &TestMsg10::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg11_descriptor_, &TestMsg11::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg12_descriptor_, &TestMsg12::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg13_descriptor_, &TestMsg13::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg14_descriptor_, &TestMsg14::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg15_descriptor_, &TestMsg15::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg16_descriptor_, &TestMsg16::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg17_descriptor_, &TestMsg17::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg18_descriptor_, &TestMsg18::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg19_descriptor_, &TestMsg19::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg20_descriptor_, &TestMsg20::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_iod_5ftest_2eproto() {
  delete ReqAuthentication::default_instance_;
  delete ReqAuthentication_reflection_;
  delete ResAuthentication::default_instance_;
  delete ResAuthentication_reflection_;
  delete ReqLogin::default_instance_;
  delete ReqLogin_reflection_;
  delete ResLogin::default_instance_;
  delete ResLogin_reflection_;
  delete ReqTestInfo::default_instance_;
  delete ReqTestInfo_reflection_;
  delete ResTestInfo::default_instance_;
  delete ResTestInfo_reflection_;
  delete ReqLogout::default_instance_;
  delete ReqLogout_reflection_;
  delete ReqTestResponseTime::default_instance_;
  delete ReqTestResponseTime_reflection_;
  delete ResTestResponseTime::default_instance_;
  delete ResTestResponseTime_reflection_;
  delete NotifyKickout::default_instance_;
  delete NotifyKickout_reflection_;
  delete TestMsg1::default_instance_;
  delete TestMsg1_reflection_;
  delete TestMsg2::default_instance_;
  delete TestMsg2_reflection_;
  delete TestMsg3::default_instance_;
  delete TestMsg3_reflection_;
  delete TestMsg4::default_instance_;
  delete TestMsg4_reflection_;
  delete TestMsg5::default_instance_;
  delete TestMsg5_reflection_;
  delete TestMsg6::default_instance_;
  delete TestMsg6_reflection_;
  delete TestMsg7::default_instance_;
  delete TestMsg7_reflection_;
  delete TestMsg8::default_instance_;
  delete TestMsg8_reflection_;
  delete TestMsg9::default_instance_;
  delete TestMsg9_reflection_;
  delete TestMsg10::default_instance_;
  delete TestMsg10_reflection_;
  delete TestMsg11::default_instance_;
  delete TestMsg11_reflection_;
  delete TestMsg12::default_instance_;
  delete TestMsg12_reflection_;
  delete TestMsg13::default_instance_;
  delete TestMsg13_reflection_;
  delete TestMsg14::default_instance_;
  delete TestMsg14_reflection_;
  delete TestMsg15::default_instance_;
  delete TestMsg15_reflection_;
  delete TestMsg16::default_instance_;
  delete TestMsg16_reflection_;
  delete TestMsg17::default_instance_;
  delete TestMsg17_reflection_;
  delete TestMsg18::default_instance_;
  delete TestMsg18_reflection_;
  delete TestMsg19::default_instance_;
  delete TestMsg19_reflection_;
  delete TestMsg20::default_instance_;
  delete TestMsg20_reflection_;
}

void protobuf_AddDesc_iod_5ftest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::iod::pb::common::protobuf_AddDesc_common_2fiod_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016iod_test.proto\022\017com.iod.pb.test\032\027commo"
    "n/iod_common.proto\"<\n\021ReqAuthentication\022"
    "\017\n\007user_id\030\001 \001(\t\022\026\n\016authentication\030\002 \001(\t"
    "\":\n\021ResAuthentication\022\016\n\006result\030\001 \001(\021\022\025\n"
    "\rauthorization\030\002 \001(\t\"2\n\010ReqLogin\022\017\n\007user"
    "_id\030\001 \001(\t\022\025\n\rauthorization\030\002 \001(\t\"+\n\010ResL"
    "ogin\022\017\n\007user_id\030\001 \001(\t\022\016\n\006result\030\002 \001(\021\"\033\n"
    "\013ReqTestInfo\022\014\n\004info\030\001 \001(\t\"\033\n\013ResTestInf"
    "o\022\014\n\004info\030\001 \001(\t\"\013\n\tReqLogout\",\n\023ReqTestR"
    "esponseTime\022\025\n\rreq_timestamp\030\001 \002(\022\",\n\023Re"
    "sTestResponseTime\022\025\n\rreq_timestamp\030\001 \002(\022"
    "\"$\n\rNotifyKickout\022\023\n\013kick_reason\030\001 \001(\021\"\035"
    "\n\010TestMsg1\022\021\n\ttest_data\030\001 \001(\014\"\035\n\010TestMsg"
    "2\022\021\n\ttest_data\030\001 \001(\014\"\035\n\010TestMsg3\022\021\n\ttest"
    "_data\030\001 \001(\014\"\035\n\010TestMsg4\022\021\n\ttest_data\030\001 \001"
    "(\014\"\035\n\010TestMsg5\022\021\n\ttest_data\030\001 \001(\014\"\035\n\010Tes"
    "tMsg6\022\021\n\ttest_data\030\001 \001(\014\"\035\n\010TestMsg7\022\021\n\t"
    "test_data\030\001 \001(\014\"\035\n\010TestMsg8\022\021\n\ttest_data"
    "\030\001 \001(\014\"\035\n\010TestMsg9\022\021\n\ttest_data\030\001 \001(\014\"\036\n"
    "\tTestMsg10\022\021\n\ttest_data\030\001 \001(\014\"\036\n\tTestMsg"
    "11\022\021\n\ttest_data\030\001 \001(\014\"\036\n\tTestMsg12\022\021\n\tte"
    "st_data\030\001 \001(\014\"\036\n\tTestMsg13\022\021\n\ttest_data\030"
    "\001 \001(\014\"\036\n\tTestMsg14\022\021\n\ttest_data\030\001 \001(\014\"\036\n"
    "\tTestMsg15\022\021\n\ttest_data\030\001 \001(\014\"\036\n\tTestMsg"
    "16\022\021\n\ttest_data\030\001 \001(\014\"\036\n\tTestMsg17\022\021\n\tte"
    "st_data\030\001 \001(\014\"\036\n\tTestMsg18\022\021\n\ttest_data\030"
    "\001 \001(\014\"\036\n\tTestMsg19\022\021\n\ttest_data\030\001 \001(\014\"\036\n"
    "\tTestMsg20\022\021\n\ttest_data\030\001 \001(\014:\\\n\023idReqAu"
    "thentication\022\032.com.iod.pb.common.BaseMsg"
    "\030\350\007 \001(\0132\".com.iod.pb.test.ReqAuthenticat"
    "ion:\\\n\023idResAuthentication\022\032.com.iod.pb."
    "common.BaseMsg\030\351\007 \001(\0132\".com.iod.pb.test."
    "ResAuthentication:J\n\nidReqLogin\022\032.com.io"
    "d.pb.common.BaseMsg\030\352\007 \001(\0132\031.com.iod.pb."
    "test.ReqLogin:J\n\nidResLogin\022\032.com.iod.pb"
    ".common.BaseMsg\030\353\007 \001(\0132\031.com.iod.pb.test"
    ".ResLogin:P\n\ridReqTestInfo\022\032.com.iod.pb."
    "common.BaseMsg\030\354\007 \001(\0132\034.com.iod.pb.test."
    "ReqTestInfo:P\n\ridResTestInfo\022\032.com.iod.p"
    "b.common.BaseMsg\030\355\007 \001(\0132\034.com.iod.pb.tes"
    "t.ResTestInfo:L\n\013idReqLogout\022\032.com.iod.p"
    "b.common.BaseMsg\030\356\007 \001(\0132\032.com.iod.pb.tes"
    "t.ReqLogout:`\n\025idReqTestResponseTime\022\032.c"
    "om.iod.pb.common.BaseMsg\030\357\007 \001(\0132$.com.io"
    "d.pb.test.ReqTestResponseTime:`\n\025idResTe"
    "stResponseTime\022\032.com.iod.pb.common.BaseM"
    "sg\030\360\007 \001(\0132$.com.iod.pb.test.ResTestRespo"
    "nseTime:T\n\017idNotifyKickout\022\032.com.iod.pb."
    "common.BaseMsg\030\361\007 \001(\0132\036.com.iod.pb.test."
    "NotifyKickout:J\n\nidTestMsg1\022\032.com.iod.pb"
    ".common.BaseMsg\030\211\' \001(\0132\031.com.iod.pb.test"
    ".TestMsg1:J\n\nidTestMsg2\022\032.com.iod.pb.com"
    "mon.BaseMsg\030\212\' \001(\0132\031.com.iod.pb.test.Tes"
    "tMsg2:J\n\nidTestMsg3\022\032.com.iod.pb.common."
    "BaseMsg\030\213\' \001(\0132\031.com.iod.pb.test.TestMsg"
    "3:J\n\nidTestMsg4\022\032.com.iod.pb.common.Base"
    "Msg\030\214\' \001(\0132\031.com.iod.pb.test.TestMsg4:J\n"
    "\nidTestMsg5\022\032.com.iod.pb.common.BaseMsg\030"
    "\215\' \001(\0132\031.com.iod.pb.test.TestMsg5:J\n\nidT"
    "estMsg6\022\032.com.iod.pb.common.BaseMsg\030\216\' \001"
    "(\0132\031.com.iod.pb.test.TestMsg6:J\n\nidTestM"
    "sg7\022\032.com.iod.pb.common.BaseMsg\030\217\' \001(\0132\031"
    ".com.iod.pb.test.TestMsg7:J\n\nidTestMsg8\022"
    "\032.com.iod.pb.common.BaseMsg\030\220\' \001(\0132\031.com"
    ".iod.pb.test.TestMsg8:J\n\nidTestMsg9\022\032.co"
    "m.iod.pb.common.BaseMsg\030\221\' \001(\0132\031.com.iod"
    ".pb.test.TestMsg9:L\n\013idTestMsg10\022\032.com.i"
    "od.pb.common.BaseMsg\030\222\' \001(\0132\032.com.iod.pb"
    ".test.TestMsg10:L\n\013idTestMsg11\022\032.com.iod"
    ".pb.common.BaseMsg\030\223\' \001(\0132\032.com.iod.pb.t"
    "est.TestMsg11:L\n\013idTestMsg12\022\032.com.iod.p"
    "b.common.BaseMsg\030\224\' \001(\0132\032.com.iod.pb.tes"
    "t.TestMsg12:L\n\013idTestMsg13\022\032.com.iod.pb."
    "common.BaseMsg\030\225\' \001(\0132\032.com.iod.pb.test."
    "TestMsg13:L\n\013idTestMsg14\022\032.com.iod.pb.co"
    "mmon.BaseMsg\030\226\' \001(\0132\032.com.iod.pb.test.Te"
    "stMsg14:L\n\013idTestMsg15\022\032.com.iod.pb.comm"
    "on.BaseMsg\030\227\' \001(\0132\032.com.iod.pb.test.Test"
    "Msg15:L\n\013idTestMsg16\022\032.com.iod.pb.common"
    ".BaseMsg\030\230\' \001(\0132\032.com.iod.pb.test.TestMs"
    "g16:L\n\013idTestMsg17\022\032.com.iod.pb.common.B"
    "aseMsg\030\231\' \001(\0132\032.com.iod.pb.test.TestMsg1"
    "7:L\n\013idTestMsg18\022\032.com.iod.pb.common.Bas"
    "eMsg\030\232\' \001(\0132\032.com.iod.pb.test.TestMsg18:"
    "L\n\013idTestMsg19\022\032.com.iod.pb.common.BaseM"
    "sg\030\233\' \001(\0132\032.com.iod.pb.test.TestMsg19:L\n"
    "\013idTestMsg20\022\032.com.iod.pb.common.BaseMsg"
    "\030\234\' \001(\0132\032.com.iod.pb.test.TestMsg20", 3515);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "iod_test.proto", &protobuf_RegisterTypes);
  ReqAuthentication::default_instance_ = new ReqAuthentication();
  ResAuthentication::default_instance_ = new ResAuthentication();
  ReqLogin::default_instance_ = new ReqLogin();
  ResLogin::default_instance_ = new ResLogin();
  ReqTestInfo::default_instance_ = new ReqTestInfo();
  ResTestInfo::default_instance_ = new ResTestInfo();
  ReqLogout::default_instance_ = new ReqLogout();
  ReqTestResponseTime::default_instance_ = new ReqTestResponseTime();
  ResTestResponseTime::default_instance_ = new ResTestResponseTime();
  NotifyKickout::default_instance_ = new NotifyKickout();
  TestMsg1::default_instance_ = new TestMsg1();
  TestMsg2::default_instance_ = new TestMsg2();
  TestMsg3::default_instance_ = new TestMsg3();
  TestMsg4::default_instance_ = new TestMsg4();
  TestMsg5::default_instance_ = new TestMsg5();
  TestMsg6::default_instance_ = new TestMsg6();
  TestMsg7::default_instance_ = new TestMsg7();
  TestMsg8::default_instance_ = new TestMsg8();
  TestMsg9::default_instance_ = new TestMsg9();
  TestMsg10::default_instance_ = new TestMsg10();
  TestMsg11::default_instance_ = new TestMsg11();
  TestMsg12::default_instance_ = new TestMsg12();
  TestMsg13::default_instance_ = new TestMsg13();
  TestMsg14::default_instance_ = new TestMsg14();
  TestMsg15::default_instance_ = new TestMsg15();
  TestMsg16::default_instance_ = new TestMsg16();
  TestMsg17::default_instance_ = new TestMsg17();
  TestMsg18::default_instance_ = new TestMsg18();
  TestMsg19::default_instance_ = new TestMsg19();
  TestMsg20::default_instance_ = new TestMsg20();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    1000, 11, false, false,
    &::com::iod::pb::test::ReqAuthentication::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    1001, 11, false, false,
    &::com::iod::pb::test::ResAuthentication::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    1002, 11, false, false,
    &::com::iod::pb::test::ReqLogin::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    1003, 11, false, false,
    &::com::iod::pb::test::ResLogin::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    1004, 11, false, false,
    &::com::iod::pb::test::ReqTestInfo::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    1005, 11, false, false,
    &::com::iod::pb::test::ResTestInfo::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    1006, 11, false, false,
    &::com::iod::pb::test::ReqLogout::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    1007, 11, false, false,
    &::com::iod::pb::test::ReqTestResponseTime::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    1008, 11, false, false,
    &::com::iod::pb::test::ResTestResponseTime::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    1009, 11, false, false,
    &::com::iod::pb::test::NotifyKickout::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5001, 11, false, false,
    &::com::iod::pb::test::TestMsg1::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5002, 11, false, false,
    &::com::iod::pb::test::TestMsg2::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5003, 11, false, false,
    &::com::iod::pb::test::TestMsg3::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5004, 11, false, false,
    &::com::iod::pb::test::TestMsg4::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5005, 11, false, false,
    &::com::iod::pb::test::TestMsg5::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5006, 11, false, false,
    &::com::iod::pb::test::TestMsg6::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5007, 11, false, false,
    &::com::iod::pb::test::TestMsg7::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5008, 11, false, false,
    &::com::iod::pb::test::TestMsg8::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5009, 11, false, false,
    &::com::iod::pb::test::TestMsg9::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5010, 11, false, false,
    &::com::iod::pb::test::TestMsg10::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5011, 11, false, false,
    &::com::iod::pb::test::TestMsg11::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5012, 11, false, false,
    &::com::iod::pb::test::TestMsg12::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5013, 11, false, false,
    &::com::iod::pb::test::TestMsg13::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5014, 11, false, false,
    &::com::iod::pb::test::TestMsg14::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5015, 11, false, false,
    &::com::iod::pb::test::TestMsg15::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5016, 11, false, false,
    &::com::iod::pb::test::TestMsg16::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5017, 11, false, false,
    &::com::iod::pb::test::TestMsg17::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5018, 11, false, false,
    &::com::iod::pb::test::TestMsg18::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5019, 11, false, false,
    &::com::iod::pb::test::TestMsg19::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::com::iod::pb::common::BaseMsg::default_instance(),
    5020, 11, false, false,
    &::com::iod::pb::test::TestMsg20::default_instance());
  ReqAuthentication::default_instance_->InitAsDefaultInstance();
  ResAuthentication::default_instance_->InitAsDefaultInstance();
  ReqLogin::default_instance_->InitAsDefaultInstance();
  ResLogin::default_instance_->InitAsDefaultInstance();
  ReqTestInfo::default_instance_->InitAsDefaultInstance();
  ResTestInfo::default_instance_->InitAsDefaultInstance();
  ReqLogout::default_instance_->InitAsDefaultInstance();
  ReqTestResponseTime::default_instance_->InitAsDefaultInstance();
  ResTestResponseTime::default_instance_->InitAsDefaultInstance();
  NotifyKickout::default_instance_->InitAsDefaultInstance();
  TestMsg1::default_instance_->InitAsDefaultInstance();
  TestMsg2::default_instance_->InitAsDefaultInstance();
  TestMsg3::default_instance_->InitAsDefaultInstance();
  TestMsg4::default_instance_->InitAsDefaultInstance();
  TestMsg5::default_instance_->InitAsDefaultInstance();
  TestMsg6::default_instance_->InitAsDefaultInstance();
  TestMsg7::default_instance_->InitAsDefaultInstance();
  TestMsg8::default_instance_->InitAsDefaultInstance();
  TestMsg9::default_instance_->InitAsDefaultInstance();
  TestMsg10::default_instance_->InitAsDefaultInstance();
  TestMsg11::default_instance_->InitAsDefaultInstance();
  TestMsg12::default_instance_->InitAsDefaultInstance();
  TestMsg13::default_instance_->InitAsDefaultInstance();
  TestMsg14::default_instance_->InitAsDefaultInstance();
  TestMsg15::default_instance_->InitAsDefaultInstance();
  TestMsg16::default_instance_->InitAsDefaultInstance();
  TestMsg17::default_instance_->InitAsDefaultInstance();
  TestMsg18::default_instance_->InitAsDefaultInstance();
  TestMsg19::default_instance_->InitAsDefaultInstance();
  TestMsg20::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_iod_5ftest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_iod_5ftest_2eproto {
  StaticDescriptorInitializer_iod_5ftest_2eproto() {
    protobuf_AddDesc_iod_5ftest_2eproto();
  }
} static_descriptor_initializer_iod_5ftest_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ReqAuthentication::kUserIdFieldNumber;
const int ReqAuthentication::kAuthenticationFieldNumber;
#endif  // !_MSC_VER

ReqAuthentication::ReqAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAuthentication::InitAsDefaultInstance() {
}

ReqAuthentication::ReqAuthentication(const ReqAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAuthentication::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  authentication_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAuthentication::~ReqAuthentication() {
  SharedDtor();
}

void ReqAuthentication::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (authentication_ != &::google::protobuf::internal::kEmptyString) {
    delete authentication_;
  }
  if (this != default_instance_) {
  }
}

void ReqAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAuthentication_descriptor_;
}

const ReqAuthentication& ReqAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

ReqAuthentication* ReqAuthentication::default_instance_ = NULL;

ReqAuthentication* ReqAuthentication::New() const {
  return new ReqAuthentication;
}

void ReqAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_authentication()) {
      if (authentication_ != &::google::protobuf::internal::kEmptyString) {
        authentication_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_authentication;
        break;
      }
      
      // optional string authentication = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authentication:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authentication()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authentication().data(), this->authentication().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_id(), output);
  }
  
  // optional string authentication = 2;
  if (has_authentication()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authentication().data(), this->authentication().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->authentication(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }
  
  // optional string authentication = 2;
  if (has_authentication()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authentication().data(), this->authentication().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authentication(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAuthentication::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
    // optional string authentication = 2;
    if (has_authentication()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authentication());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAuthentication::MergeFrom(const ReqAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_authentication()) {
      set_authentication(from.authentication());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAuthentication::CopyFrom(const ReqAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAuthentication::IsInitialized() const {
  
  return true;
}

void ReqAuthentication::Swap(ReqAuthentication* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(authentication_, other->authentication_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAuthentication_descriptor_;
  metadata.reflection = ReqAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResAuthentication::kResultFieldNumber;
const int ResAuthentication::kAuthorizationFieldNumber;
#endif  // !_MSC_VER

ResAuthentication::ResAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResAuthentication::InitAsDefaultInstance() {
}

ResAuthentication::ResAuthentication(const ResAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResAuthentication::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  authorization_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResAuthentication::~ResAuthentication() {
  SharedDtor();
}

void ResAuthentication::SharedDtor() {
  if (authorization_ != &::google::protobuf::internal::kEmptyString) {
    delete authorization_;
  }
  if (this != default_instance_) {
  }
}

void ResAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResAuthentication_descriptor_;
}

const ResAuthentication& ResAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

ResAuthentication* ResAuthentication::default_instance_ = NULL;

ResAuthentication* ResAuthentication::New() const {
  return new ResAuthentication;
}

void ResAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_authorization()) {
      if (authorization_ != &::google::protobuf::internal::kEmptyString) {
        authorization_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_authorization;
        break;
      }
      
      // optional string authorization = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authorization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorization()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authorization().data(), this->authorization().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }
  
  // optional string authorization = 2;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorization().data(), this->authorization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->authorization(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }
  
  // optional string authorization = 2;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorization().data(), this->authorization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authorization(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResAuthentication::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }
    
    // optional string authorization = 2;
    if (has_authorization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authorization());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResAuthentication::MergeFrom(const ResAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_authorization()) {
      set_authorization(from.authorization());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResAuthentication::CopyFrom(const ResAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResAuthentication::IsInitialized() const {
  
  return true;
}

void ResAuthentication::Swap(ResAuthentication* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(authorization_, other->authorization_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResAuthentication_descriptor_;
  metadata.reflection = ResAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLogin::kUserIdFieldNumber;
const int ReqLogin::kAuthorizationFieldNumber;
#endif  // !_MSC_VER

ReqLogin::ReqLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLogin::InitAsDefaultInstance() {
}

ReqLogin::ReqLogin(const ReqLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLogin::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  authorization_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLogin::~ReqLogin() {
  SharedDtor();
}

void ReqLogin::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (authorization_ != &::google::protobuf::internal::kEmptyString) {
    delete authorization_;
  }
  if (this != default_instance_) {
  }
}

void ReqLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogin_descriptor_;
}

const ReqLogin& ReqLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

ReqLogin* ReqLogin::default_instance_ = NULL;

ReqLogin* ReqLogin::New() const {
  return new ReqLogin;
}

void ReqLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_authorization()) {
      if (authorization_ != &::google::protobuf::internal::kEmptyString) {
        authorization_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_authorization;
        break;
      }
      
      // optional string authorization = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authorization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorization()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authorization().data(), this->authorization().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_id(), output);
  }
  
  // optional string authorization = 2;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorization().data(), this->authorization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->authorization(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }
  
  // optional string authorization = 2;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorization().data(), this->authorization().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authorization(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
    // optional string authorization = 2;
    if (has_authorization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authorization());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLogin::MergeFrom(const ReqLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_authorization()) {
      set_authorization(from.authorization());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogin::CopyFrom(const ReqLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogin::IsInitialized() const {
  
  return true;
}

void ReqLogin::Swap(ReqLogin* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(authorization_, other->authorization_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLogin_descriptor_;
  metadata.reflection = ReqLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResLogin::kUserIdFieldNumber;
const int ResLogin::kResultFieldNumber;
#endif  // !_MSC_VER

ResLogin::ResLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResLogin::InitAsDefaultInstance() {
}

ResLogin::ResLogin(const ResLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResLogin::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResLogin::~ResLogin() {
  SharedDtor();
}

void ResLogin::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void ResLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResLogin_descriptor_;
}

const ResLogin& ResLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

ResLogin* ResLogin::default_instance_ = NULL;

ResLogin* ResLogin::New() const {
  return new ResLogin;
}

void ResLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional sint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_id(), output);
  }
  
  // optional sint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }
  
  // optional sint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
    // optional sint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResLogin::MergeFrom(const ResLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResLogin::CopyFrom(const ResLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResLogin::IsInitialized() const {
  
  return true;
}

void ResLogin::Swap(ResLogin* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResLogin_descriptor_;
  metadata.reflection = ResLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqTestInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

ReqTestInfo::ReqTestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqTestInfo::InitAsDefaultInstance() {
}

ReqTestInfo::ReqTestInfo(const ReqTestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqTestInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTestInfo::~ReqTestInfo() {
  SharedDtor();
}

void ReqTestInfo::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void ReqTestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTestInfo_descriptor_;
}

const ReqTestInfo& ReqTestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

ReqTestInfo* ReqTestInfo::default_instance_ = NULL;

ReqTestInfo* ReqTestInfo::New() const {
  return new ReqTestInfo;
}

void ReqTestInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqTestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqTestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqTestInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTestInfo::MergeFrom(const ReqTestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTestInfo::CopyFrom(const ReqTestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTestInfo::IsInitialized() const {
  
  return true;
}

void ReqTestInfo::Swap(ReqTestInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTestInfo_descriptor_;
  metadata.reflection = ReqTestInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResTestInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

ResTestInfo::ResTestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResTestInfo::InitAsDefaultInstance() {
}

ResTestInfo::ResTestInfo(const ResTestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResTestInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResTestInfo::~ResTestInfo() {
  SharedDtor();
}

void ResTestInfo::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void ResTestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResTestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResTestInfo_descriptor_;
}

const ResTestInfo& ResTestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

ResTestInfo* ResTestInfo::default_instance_ = NULL;

ResTestInfo* ResTestInfo::New() const {
  return new ResTestInfo;
}

void ResTestInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResTestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResTestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResTestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResTestInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResTestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResTestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResTestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResTestInfo::MergeFrom(const ResTestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResTestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResTestInfo::CopyFrom(const ResTestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResTestInfo::IsInitialized() const {
  
  return true;
}

void ResTestInfo::Swap(ResTestInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResTestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResTestInfo_descriptor_;
  metadata.reflection = ResTestInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqLogout::ReqLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLogout::InitAsDefaultInstance() {
}

ReqLogout::ReqLogout(const ReqLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLogout::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLogout::~ReqLogout() {
  SharedDtor();
}

void ReqLogout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogout_descriptor_;
}

const ReqLogout& ReqLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

ReqLogout* ReqLogout::default_instance_ = NULL;

ReqLogout* ReqLogout::New() const {
  return new ReqLogout;
}

void ReqLogout::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLogout::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLogout::MergeFrom(const ReqLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogout::CopyFrom(const ReqLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogout::IsInitialized() const {
  
  return true;
}

void ReqLogout::Swap(ReqLogout* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLogout_descriptor_;
  metadata.reflection = ReqLogout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqTestResponseTime::kReqTimestampFieldNumber;
#endif  // !_MSC_VER

ReqTestResponseTime::ReqTestResponseTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqTestResponseTime::InitAsDefaultInstance() {
}

ReqTestResponseTime::ReqTestResponseTime(const ReqTestResponseTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqTestResponseTime::SharedCtor() {
  _cached_size_ = 0;
  req_timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTestResponseTime::~ReqTestResponseTime() {
  SharedDtor();
}

void ReqTestResponseTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqTestResponseTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTestResponseTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTestResponseTime_descriptor_;
}

const ReqTestResponseTime& ReqTestResponseTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

ReqTestResponseTime* ReqTestResponseTime::default_instance_ = NULL;

ReqTestResponseTime* ReqTestResponseTime::New() const {
  return new ReqTestResponseTime;
}

void ReqTestResponseTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    req_timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTestResponseTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 req_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &req_timestamp_)));
          set_has_req_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqTestResponseTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 req_timestamp = 1;
  if (has_req_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->req_timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqTestResponseTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 req_timestamp = 1;
  if (has_req_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->req_timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqTestResponseTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 req_timestamp = 1;
    if (has_req_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->req_timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTestResponseTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTestResponseTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTestResponseTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTestResponseTime::MergeFrom(const ReqTestResponseTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_timestamp()) {
      set_req_timestamp(from.req_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTestResponseTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTestResponseTime::CopyFrom(const ReqTestResponseTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTestResponseTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqTestResponseTime::Swap(ReqTestResponseTime* other) {
  if (other != this) {
    std::swap(req_timestamp_, other->req_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTestResponseTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTestResponseTime_descriptor_;
  metadata.reflection = ReqTestResponseTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResTestResponseTime::kReqTimestampFieldNumber;
#endif  // !_MSC_VER

ResTestResponseTime::ResTestResponseTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResTestResponseTime::InitAsDefaultInstance() {
}

ResTestResponseTime::ResTestResponseTime(const ResTestResponseTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResTestResponseTime::SharedCtor() {
  _cached_size_ = 0;
  req_timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResTestResponseTime::~ResTestResponseTime() {
  SharedDtor();
}

void ResTestResponseTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResTestResponseTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResTestResponseTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResTestResponseTime_descriptor_;
}

const ResTestResponseTime& ResTestResponseTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

ResTestResponseTime* ResTestResponseTime::default_instance_ = NULL;

ResTestResponseTime* ResTestResponseTime::New() const {
  return new ResTestResponseTime;
}

void ResTestResponseTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    req_timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResTestResponseTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 req_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &req_timestamp_)));
          set_has_req_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResTestResponseTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 req_timestamp = 1;
  if (has_req_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->req_timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResTestResponseTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 req_timestamp = 1;
  if (has_req_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->req_timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResTestResponseTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 req_timestamp = 1;
    if (has_req_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->req_timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResTestResponseTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResTestResponseTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResTestResponseTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResTestResponseTime::MergeFrom(const ResTestResponseTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_timestamp()) {
      set_req_timestamp(from.req_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResTestResponseTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResTestResponseTime::CopyFrom(const ResTestResponseTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResTestResponseTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResTestResponseTime::Swap(ResTestResponseTime* other) {
  if (other != this) {
    std::swap(req_timestamp_, other->req_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResTestResponseTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResTestResponseTime_descriptor_;
  metadata.reflection = ResTestResponseTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyKickout::kKickReasonFieldNumber;
#endif  // !_MSC_VER

NotifyKickout::NotifyKickout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyKickout::InitAsDefaultInstance() {
}

NotifyKickout::NotifyKickout(const NotifyKickout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyKickout::SharedCtor() {
  _cached_size_ = 0;
  kick_reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyKickout::~NotifyKickout() {
  SharedDtor();
}

void NotifyKickout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyKickout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyKickout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyKickout_descriptor_;
}

const NotifyKickout& NotifyKickout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

NotifyKickout* NotifyKickout::default_instance_ = NULL;

NotifyKickout* NotifyKickout::New() const {
  return new NotifyKickout;
}

void NotifyKickout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kick_reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyKickout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 kick_reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &kick_reason_)));
          set_has_kick_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyKickout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 kick_reason = 1;
  if (has_kick_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->kick_reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyKickout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 kick_reason = 1;
  if (has_kick_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->kick_reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyKickout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 kick_reason = 1;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->kick_reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyKickout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyKickout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyKickout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyKickout::MergeFrom(const NotifyKickout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kick_reason()) {
      set_kick_reason(from.kick_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyKickout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyKickout::CopyFrom(const NotifyKickout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyKickout::IsInitialized() const {
  
  return true;
}

void NotifyKickout::Swap(NotifyKickout* other) {
  if (other != this) {
    std::swap(kick_reason_, other->kick_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyKickout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyKickout_descriptor_;
  metadata.reflection = NotifyKickout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg1::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg1::TestMsg1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg1::InitAsDefaultInstance() {
}

TestMsg1::TestMsg1(const TestMsg1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg1::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg1::~TestMsg1() {
  SharedDtor();
}

void TestMsg1::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg1_descriptor_;
}

const TestMsg1& TestMsg1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg1* TestMsg1::default_instance_ = NULL;

TestMsg1* TestMsg1::New() const {
  return new TestMsg1;
}

void TestMsg1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg1::MergeFrom(const TestMsg1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg1::CopyFrom(const TestMsg1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg1::IsInitialized() const {
  
  return true;
}

void TestMsg1::Swap(TestMsg1* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg1_descriptor_;
  metadata.reflection = TestMsg1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg2::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg2::TestMsg2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg2::InitAsDefaultInstance() {
}

TestMsg2::TestMsg2(const TestMsg2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg2::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg2::~TestMsg2() {
  SharedDtor();
}

void TestMsg2::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg2_descriptor_;
}

const TestMsg2& TestMsg2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg2* TestMsg2::default_instance_ = NULL;

TestMsg2* TestMsg2::New() const {
  return new TestMsg2;
}

void TestMsg2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg2::MergeFrom(const TestMsg2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg2::CopyFrom(const TestMsg2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg2::IsInitialized() const {
  
  return true;
}

void TestMsg2::Swap(TestMsg2* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg2_descriptor_;
  metadata.reflection = TestMsg2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg3::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg3::TestMsg3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg3::InitAsDefaultInstance() {
}

TestMsg3::TestMsg3(const TestMsg3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg3::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg3::~TestMsg3() {
  SharedDtor();
}

void TestMsg3::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg3_descriptor_;
}

const TestMsg3& TestMsg3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg3* TestMsg3::default_instance_ = NULL;

TestMsg3* TestMsg3::New() const {
  return new TestMsg3;
}

void TestMsg3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg3::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg3::MergeFrom(const TestMsg3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg3::CopyFrom(const TestMsg3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg3::IsInitialized() const {
  
  return true;
}

void TestMsg3::Swap(TestMsg3* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg3_descriptor_;
  metadata.reflection = TestMsg3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg4::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg4::TestMsg4()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg4::InitAsDefaultInstance() {
}

TestMsg4::TestMsg4(const TestMsg4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg4::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg4::~TestMsg4() {
  SharedDtor();
}

void TestMsg4::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg4_descriptor_;
}

const TestMsg4& TestMsg4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg4* TestMsg4::default_instance_ = NULL;

TestMsg4* TestMsg4::New() const {
  return new TestMsg4;
}

void TestMsg4::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg4::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg4::MergeFrom(const TestMsg4& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg4::CopyFrom(const TestMsg4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg4::IsInitialized() const {
  
  return true;
}

void TestMsg4::Swap(TestMsg4* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg4_descriptor_;
  metadata.reflection = TestMsg4_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg5::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg5::TestMsg5()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg5::InitAsDefaultInstance() {
}

TestMsg5::TestMsg5(const TestMsg5& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg5::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg5::~TestMsg5() {
  SharedDtor();
}

void TestMsg5::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg5::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg5::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg5_descriptor_;
}

const TestMsg5& TestMsg5::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg5* TestMsg5::default_instance_ = NULL;

TestMsg5* TestMsg5::New() const {
  return new TestMsg5;
}

void TestMsg5::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg5::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg5::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg5::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg5::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg5::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg5* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg5*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg5::MergeFrom(const TestMsg5& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg5::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg5::CopyFrom(const TestMsg5& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg5::IsInitialized() const {
  
  return true;
}

void TestMsg5::Swap(TestMsg5* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg5::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg5_descriptor_;
  metadata.reflection = TestMsg5_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg6::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg6::TestMsg6()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg6::InitAsDefaultInstance() {
}

TestMsg6::TestMsg6(const TestMsg6& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg6::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg6::~TestMsg6() {
  SharedDtor();
}

void TestMsg6::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg6::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg6::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg6_descriptor_;
}

const TestMsg6& TestMsg6::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg6* TestMsg6::default_instance_ = NULL;

TestMsg6* TestMsg6::New() const {
  return new TestMsg6;
}

void TestMsg6::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg6::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg6::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg6::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg6::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg6::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg6* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg6*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg6::MergeFrom(const TestMsg6& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg6::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg6::CopyFrom(const TestMsg6& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg6::IsInitialized() const {
  
  return true;
}

void TestMsg6::Swap(TestMsg6* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg6::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg6_descriptor_;
  metadata.reflection = TestMsg6_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg7::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg7::TestMsg7()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg7::InitAsDefaultInstance() {
}

TestMsg7::TestMsg7(const TestMsg7& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg7::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg7::~TestMsg7() {
  SharedDtor();
}

void TestMsg7::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg7::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg7::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg7_descriptor_;
}

const TestMsg7& TestMsg7::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg7* TestMsg7::default_instance_ = NULL;

TestMsg7* TestMsg7::New() const {
  return new TestMsg7;
}

void TestMsg7::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg7::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg7::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg7::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg7::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg7::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg7* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg7*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg7::MergeFrom(const TestMsg7& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg7::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg7::CopyFrom(const TestMsg7& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg7::IsInitialized() const {
  
  return true;
}

void TestMsg7::Swap(TestMsg7* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg7::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg7_descriptor_;
  metadata.reflection = TestMsg7_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg8::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg8::TestMsg8()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg8::InitAsDefaultInstance() {
}

TestMsg8::TestMsg8(const TestMsg8& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg8::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg8::~TestMsg8() {
  SharedDtor();
}

void TestMsg8::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg8::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg8::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg8_descriptor_;
}

const TestMsg8& TestMsg8::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg8* TestMsg8::default_instance_ = NULL;

TestMsg8* TestMsg8::New() const {
  return new TestMsg8;
}

void TestMsg8::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg8::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg8::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg8::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg8::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg8::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg8* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg8*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg8::MergeFrom(const TestMsg8& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg8::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg8::CopyFrom(const TestMsg8& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg8::IsInitialized() const {
  
  return true;
}

void TestMsg8::Swap(TestMsg8* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg8::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg8_descriptor_;
  metadata.reflection = TestMsg8_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg9::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg9::TestMsg9()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg9::InitAsDefaultInstance() {
}

TestMsg9::TestMsg9(const TestMsg9& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg9::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg9::~TestMsg9() {
  SharedDtor();
}

void TestMsg9::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg9::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg9::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg9_descriptor_;
}

const TestMsg9& TestMsg9::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg9* TestMsg9::default_instance_ = NULL;

TestMsg9* TestMsg9::New() const {
  return new TestMsg9;
}

void TestMsg9::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg9::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg9::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg9::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg9::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg9::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg9* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg9*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg9::MergeFrom(const TestMsg9& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg9::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg9::CopyFrom(const TestMsg9& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg9::IsInitialized() const {
  
  return true;
}

void TestMsg9::Swap(TestMsg9* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg9::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg9_descriptor_;
  metadata.reflection = TestMsg9_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg10::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg10::TestMsg10()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg10::InitAsDefaultInstance() {
}

TestMsg10::TestMsg10(const TestMsg10& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg10::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg10::~TestMsg10() {
  SharedDtor();
}

void TestMsg10::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg10::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg10::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg10_descriptor_;
}

const TestMsg10& TestMsg10::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg10* TestMsg10::default_instance_ = NULL;

TestMsg10* TestMsg10::New() const {
  return new TestMsg10;
}

void TestMsg10::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg10::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg10::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg10::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg10::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg10::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg10* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg10*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg10::MergeFrom(const TestMsg10& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg10::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg10::CopyFrom(const TestMsg10& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg10::IsInitialized() const {
  
  return true;
}

void TestMsg10::Swap(TestMsg10* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg10::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg10_descriptor_;
  metadata.reflection = TestMsg10_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg11::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg11::TestMsg11()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg11::InitAsDefaultInstance() {
}

TestMsg11::TestMsg11(const TestMsg11& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg11::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg11::~TestMsg11() {
  SharedDtor();
}

void TestMsg11::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg11::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg11::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg11_descriptor_;
}

const TestMsg11& TestMsg11::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg11* TestMsg11::default_instance_ = NULL;

TestMsg11* TestMsg11::New() const {
  return new TestMsg11;
}

void TestMsg11::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg11::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg11::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg11::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg11::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg11::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg11* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg11*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg11::MergeFrom(const TestMsg11& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg11::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg11::CopyFrom(const TestMsg11& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg11::IsInitialized() const {
  
  return true;
}

void TestMsg11::Swap(TestMsg11* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg11::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg11_descriptor_;
  metadata.reflection = TestMsg11_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg12::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg12::TestMsg12()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg12::InitAsDefaultInstance() {
}

TestMsg12::TestMsg12(const TestMsg12& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg12::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg12::~TestMsg12() {
  SharedDtor();
}

void TestMsg12::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg12::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg12::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg12_descriptor_;
}

const TestMsg12& TestMsg12::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg12* TestMsg12::default_instance_ = NULL;

TestMsg12* TestMsg12::New() const {
  return new TestMsg12;
}

void TestMsg12::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg12::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg12::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg12::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg12::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg12::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg12* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg12*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg12::MergeFrom(const TestMsg12& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg12::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg12::CopyFrom(const TestMsg12& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg12::IsInitialized() const {
  
  return true;
}

void TestMsg12::Swap(TestMsg12* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg12::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg12_descriptor_;
  metadata.reflection = TestMsg12_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg13::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg13::TestMsg13()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg13::InitAsDefaultInstance() {
}

TestMsg13::TestMsg13(const TestMsg13& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg13::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg13::~TestMsg13() {
  SharedDtor();
}

void TestMsg13::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg13::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg13::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg13_descriptor_;
}

const TestMsg13& TestMsg13::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg13* TestMsg13::default_instance_ = NULL;

TestMsg13* TestMsg13::New() const {
  return new TestMsg13;
}

void TestMsg13::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg13::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg13::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg13::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg13::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg13::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg13* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg13*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg13::MergeFrom(const TestMsg13& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg13::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg13::CopyFrom(const TestMsg13& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg13::IsInitialized() const {
  
  return true;
}

void TestMsg13::Swap(TestMsg13* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg13::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg13_descriptor_;
  metadata.reflection = TestMsg13_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg14::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg14::TestMsg14()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg14::InitAsDefaultInstance() {
}

TestMsg14::TestMsg14(const TestMsg14& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg14::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg14::~TestMsg14() {
  SharedDtor();
}

void TestMsg14::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg14::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg14::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg14_descriptor_;
}

const TestMsg14& TestMsg14::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg14* TestMsg14::default_instance_ = NULL;

TestMsg14* TestMsg14::New() const {
  return new TestMsg14;
}

void TestMsg14::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg14::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg14::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg14::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg14::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg14::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg14* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg14*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg14::MergeFrom(const TestMsg14& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg14::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg14::CopyFrom(const TestMsg14& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg14::IsInitialized() const {
  
  return true;
}

void TestMsg14::Swap(TestMsg14* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg14::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg14_descriptor_;
  metadata.reflection = TestMsg14_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg15::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg15::TestMsg15()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg15::InitAsDefaultInstance() {
}

TestMsg15::TestMsg15(const TestMsg15& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg15::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg15::~TestMsg15() {
  SharedDtor();
}

void TestMsg15::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg15::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg15::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg15_descriptor_;
}

const TestMsg15& TestMsg15::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg15* TestMsg15::default_instance_ = NULL;

TestMsg15* TestMsg15::New() const {
  return new TestMsg15;
}

void TestMsg15::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg15::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg15::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg15::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg15::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg15::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg15* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg15*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg15::MergeFrom(const TestMsg15& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg15::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg15::CopyFrom(const TestMsg15& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg15::IsInitialized() const {
  
  return true;
}

void TestMsg15::Swap(TestMsg15* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg15::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg15_descriptor_;
  metadata.reflection = TestMsg15_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg16::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg16::TestMsg16()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg16::InitAsDefaultInstance() {
}

TestMsg16::TestMsg16(const TestMsg16& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg16::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg16::~TestMsg16() {
  SharedDtor();
}

void TestMsg16::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg16::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg16::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg16_descriptor_;
}

const TestMsg16& TestMsg16::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg16* TestMsg16::default_instance_ = NULL;

TestMsg16* TestMsg16::New() const {
  return new TestMsg16;
}

void TestMsg16::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg16::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg16::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg16::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg16::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg16::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg16* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg16*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg16::MergeFrom(const TestMsg16& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg16::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg16::CopyFrom(const TestMsg16& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg16::IsInitialized() const {
  
  return true;
}

void TestMsg16::Swap(TestMsg16* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg16::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg16_descriptor_;
  metadata.reflection = TestMsg16_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg17::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg17::TestMsg17()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg17::InitAsDefaultInstance() {
}

TestMsg17::TestMsg17(const TestMsg17& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg17::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg17::~TestMsg17() {
  SharedDtor();
}

void TestMsg17::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg17::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg17::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg17_descriptor_;
}

const TestMsg17& TestMsg17::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg17* TestMsg17::default_instance_ = NULL;

TestMsg17* TestMsg17::New() const {
  return new TestMsg17;
}

void TestMsg17::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg17::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg17::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg17::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg17::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg17::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg17* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg17*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg17::MergeFrom(const TestMsg17& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg17::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg17::CopyFrom(const TestMsg17& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg17::IsInitialized() const {
  
  return true;
}

void TestMsg17::Swap(TestMsg17* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg17::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg17_descriptor_;
  metadata.reflection = TestMsg17_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg18::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg18::TestMsg18()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg18::InitAsDefaultInstance() {
}

TestMsg18::TestMsg18(const TestMsg18& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg18::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg18::~TestMsg18() {
  SharedDtor();
}

void TestMsg18::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg18::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg18::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg18_descriptor_;
}

const TestMsg18& TestMsg18::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg18* TestMsg18::default_instance_ = NULL;

TestMsg18* TestMsg18::New() const {
  return new TestMsg18;
}

void TestMsg18::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg18::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg18::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg18::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg18::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg18::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg18* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg18*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg18::MergeFrom(const TestMsg18& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg18::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg18::CopyFrom(const TestMsg18& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg18::IsInitialized() const {
  
  return true;
}

void TestMsg18::Swap(TestMsg18* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg18::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg18_descriptor_;
  metadata.reflection = TestMsg18_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg19::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg19::TestMsg19()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg19::InitAsDefaultInstance() {
}

TestMsg19::TestMsg19(const TestMsg19& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg19::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg19::~TestMsg19() {
  SharedDtor();
}

void TestMsg19::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg19::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg19::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg19_descriptor_;
}

const TestMsg19& TestMsg19::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg19* TestMsg19::default_instance_ = NULL;

TestMsg19* TestMsg19::New() const {
  return new TestMsg19;
}

void TestMsg19::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg19::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg19::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg19::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg19::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg19::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg19* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg19*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg19::MergeFrom(const TestMsg19& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg19::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg19::CopyFrom(const TestMsg19& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg19::IsInitialized() const {
  
  return true;
}

void TestMsg19::Swap(TestMsg19* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg19::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg19_descriptor_;
  metadata.reflection = TestMsg19_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg20::kTestDataFieldNumber;
#endif  // !_MSC_VER

TestMsg20::TestMsg20()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg20::InitAsDefaultInstance() {
}

TestMsg20::TestMsg20(const TestMsg20& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg20::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg20::~TestMsg20() {
  SharedDtor();
}

void TestMsg20::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  if (this != default_instance_) {
  }
}

void TestMsg20::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg20::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg20_descriptor_;
}

const TestMsg20& TestMsg20::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iod_5ftest_2eproto();  return *default_instance_;
}

TestMsg20* TestMsg20::default_instance_ = NULL;

TestMsg20* TestMsg20::New() const {
  return new TestMsg20;
}

void TestMsg20::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg20::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg20::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->test_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg20::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes test_data = 1;
  if (has_test_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->test_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg20::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg20::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg20* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg20*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg20::MergeFrom(const TestMsg20& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg20::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg20::CopyFrom(const TestMsg20& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg20::IsInitialized() const {
  
  return true;
}

void TestMsg20::Swap(TestMsg20* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg20::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg20_descriptor_;
  metadata.reflection = TestMsg20_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ReqAuthentication >, 11, false >
  idReqAuthentication(kIdReqAuthenticationFieldNumber, ::com::iod::pb::test::ReqAuthentication::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ResAuthentication >, 11, false >
  idResAuthentication(kIdResAuthenticationFieldNumber, ::com::iod::pb::test::ResAuthentication::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ReqLogin >, 11, false >
  idReqLogin(kIdReqLoginFieldNumber, ::com::iod::pb::test::ReqLogin::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ResLogin >, 11, false >
  idResLogin(kIdResLoginFieldNumber, ::com::iod::pb::test::ResLogin::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ReqTestInfo >, 11, false >
  idReqTestInfo(kIdReqTestInfoFieldNumber, ::com::iod::pb::test::ReqTestInfo::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ResTestInfo >, 11, false >
  idResTestInfo(kIdResTestInfoFieldNumber, ::com::iod::pb::test::ResTestInfo::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ReqLogout >, 11, false >
  idReqLogout(kIdReqLogoutFieldNumber, ::com::iod::pb::test::ReqLogout::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ReqTestResponseTime >, 11, false >
  idReqTestResponseTime(kIdReqTestResponseTimeFieldNumber, ::com::iod::pb::test::ReqTestResponseTime::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ResTestResponseTime >, 11, false >
  idResTestResponseTime(kIdResTestResponseTimeFieldNumber, ::com::iod::pb::test::ResTestResponseTime::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::NotifyKickout >, 11, false >
  idNotifyKickout(kIdNotifyKickoutFieldNumber, ::com::iod::pb::test::NotifyKickout::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg1 >, 11, false >
  idTestMsg1(kIdTestMsg1FieldNumber, ::com::iod::pb::test::TestMsg1::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg2 >, 11, false >
  idTestMsg2(kIdTestMsg2FieldNumber, ::com::iod::pb::test::TestMsg2::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg3 >, 11, false >
  idTestMsg3(kIdTestMsg3FieldNumber, ::com::iod::pb::test::TestMsg3::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg4 >, 11, false >
  idTestMsg4(kIdTestMsg4FieldNumber, ::com::iod::pb::test::TestMsg4::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg5 >, 11, false >
  idTestMsg5(kIdTestMsg5FieldNumber, ::com::iod::pb::test::TestMsg5::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg6 >, 11, false >
  idTestMsg6(kIdTestMsg6FieldNumber, ::com::iod::pb::test::TestMsg6::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg7 >, 11, false >
  idTestMsg7(kIdTestMsg7FieldNumber, ::com::iod::pb::test::TestMsg7::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg8 >, 11, false >
  idTestMsg8(kIdTestMsg8FieldNumber, ::com::iod::pb::test::TestMsg8::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg9 >, 11, false >
  idTestMsg9(kIdTestMsg9FieldNumber, ::com::iod::pb::test::TestMsg9::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg10 >, 11, false >
  idTestMsg10(kIdTestMsg10FieldNumber, ::com::iod::pb::test::TestMsg10::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg11 >, 11, false >
  idTestMsg11(kIdTestMsg11FieldNumber, ::com::iod::pb::test::TestMsg11::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg12 >, 11, false >
  idTestMsg12(kIdTestMsg12FieldNumber, ::com::iod::pb::test::TestMsg12::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg13 >, 11, false >
  idTestMsg13(kIdTestMsg13FieldNumber, ::com::iod::pb::test::TestMsg13::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg14 >, 11, false >
  idTestMsg14(kIdTestMsg14FieldNumber, ::com::iod::pb::test::TestMsg14::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg15 >, 11, false >
  idTestMsg15(kIdTestMsg15FieldNumber, ::com::iod::pb::test::TestMsg15::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg16 >, 11, false >
  idTestMsg16(kIdTestMsg16FieldNumber, ::com::iod::pb::test::TestMsg16::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg17 >, 11, false >
  idTestMsg17(kIdTestMsg17FieldNumber, ::com::iod::pb::test::TestMsg17::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg18 >, 11, false >
  idTestMsg18(kIdTestMsg18FieldNumber, ::com::iod::pb::test::TestMsg18::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg19 >, 11, false >
  idTestMsg19(kIdTestMsg19FieldNumber, ::com::iod::pb::test::TestMsg19::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg20 >, 11, false >
  idTestMsg20(kIdTestMsg20FieldNumber, ::com::iod::pb::test::TestMsg20::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace pb
}  // namespace iod
}  // namespace com

// @@protoc_insertion_point(global_scope)
