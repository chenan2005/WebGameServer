// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iod_test.proto

#ifndef PROTOBUF_iod_5ftest_2eproto__INCLUDED
#define PROTOBUF_iod_5ftest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common/iod_common.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace iod {
namespace pb {
namespace test {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_iod_5ftest_2eproto();
void protobuf_AssignDesc_iod_5ftest_2eproto();
void protobuf_ShutdownFile_iod_5ftest_2eproto();

class ReqAuthentication;
class ResAuthentication;
class ReqLogin;
class ResLogin;
class ReqTestInfo;
class ResTestInfo;
class ReqLogout;
class ReqTestResponseTime;
class ResTestResponseTime;
class NotifyKickout;
class TestMsg1;
class TestMsg2;
class TestMsg3;
class TestMsg4;
class TestMsg5;
class TestMsg6;
class TestMsg7;
class TestMsg8;
class TestMsg9;
class TestMsg10;
class TestMsg11;
class TestMsg12;
class TestMsg13;
class TestMsg14;
class TestMsg15;
class TestMsg16;
class TestMsg17;
class TestMsg18;
class TestMsg19;
class TestMsg20;

// ===================================================================

class ReqAuthentication : public ::google::protobuf::Message {
 public:
  ReqAuthentication();
  virtual ~ReqAuthentication();
  
  ReqAuthentication(const ReqAuthentication& from);
  
  inline ReqAuthentication& operator=(const ReqAuthentication& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAuthentication& default_instance();
  
  void Swap(ReqAuthentication* other);
  
  // implements Message ----------------------------------------------
  
  ReqAuthentication* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAuthentication& from);
  void MergeFrom(const ReqAuthentication& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  
  // optional string authentication = 2;
  inline bool has_authentication() const;
  inline void clear_authentication();
  static const int kAuthenticationFieldNumber = 2;
  inline const ::std::string& authentication() const;
  inline void set_authentication(const ::std::string& value);
  inline void set_authentication(const char* value);
  inline void set_authentication(const char* value, size_t size);
  inline ::std::string* mutable_authentication();
  inline ::std::string* release_authentication();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.ReqAuthentication)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_authentication();
  inline void clear_has_authentication();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* user_id_;
  ::std::string* authentication_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static ReqAuthentication* default_instance_;
};
// -------------------------------------------------------------------

class ResAuthentication : public ::google::protobuf::Message {
 public:
  ResAuthentication();
  virtual ~ResAuthentication();
  
  ResAuthentication(const ResAuthentication& from);
  
  inline ResAuthentication& operator=(const ResAuthentication& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResAuthentication& default_instance();
  
  void Swap(ResAuthentication* other);
  
  // implements Message ----------------------------------------------
  
  ResAuthentication* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResAuthentication& from);
  void MergeFrom(const ResAuthentication& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional sint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string authorization = 2;
  inline bool has_authorization() const;
  inline void clear_authorization();
  static const int kAuthorizationFieldNumber = 2;
  inline const ::std::string& authorization() const;
  inline void set_authorization(const ::std::string& value);
  inline void set_authorization(const char* value);
  inline void set_authorization(const char* value, size_t size);
  inline ::std::string* mutable_authorization();
  inline ::std::string* release_authorization();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.ResAuthentication)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_authorization();
  inline void clear_has_authorization();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* authorization_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static ResAuthentication* default_instance_;
};
// -------------------------------------------------------------------

class ReqLogin : public ::google::protobuf::Message {
 public:
  ReqLogin();
  virtual ~ReqLogin();
  
  ReqLogin(const ReqLogin& from);
  
  inline ReqLogin& operator=(const ReqLogin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLogin& default_instance();
  
  void Swap(ReqLogin* other);
  
  // implements Message ----------------------------------------------
  
  ReqLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLogin& from);
  void MergeFrom(const ReqLogin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  
  // optional string authorization = 2;
  inline bool has_authorization() const;
  inline void clear_authorization();
  static const int kAuthorizationFieldNumber = 2;
  inline const ::std::string& authorization() const;
  inline void set_authorization(const ::std::string& value);
  inline void set_authorization(const char* value);
  inline void set_authorization(const char* value, size_t size);
  inline ::std::string* mutable_authorization();
  inline ::std::string* release_authorization();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.ReqLogin)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_authorization();
  inline void clear_has_authorization();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* user_id_;
  ::std::string* authorization_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static ReqLogin* default_instance_;
};
// -------------------------------------------------------------------

class ResLogin : public ::google::protobuf::Message {
 public:
  ResLogin();
  virtual ~ResLogin();
  
  ResLogin(const ResLogin& from);
  
  inline ResLogin& operator=(const ResLogin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResLogin& default_instance();
  
  void Swap(ResLogin* other);
  
  // implements Message ----------------------------------------------
  
  ResLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResLogin& from);
  void MergeFrom(const ResLogin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  
  // optional sint32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.ResLogin)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* user_id_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static ResLogin* default_instance_;
};
// -------------------------------------------------------------------

class ReqTestInfo : public ::google::protobuf::Message {
 public:
  ReqTestInfo();
  virtual ~ReqTestInfo();
  
  ReqTestInfo(const ReqTestInfo& from);
  
  inline ReqTestInfo& operator=(const ReqTestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqTestInfo& default_instance();
  
  void Swap(ReqTestInfo* other);
  
  // implements Message ----------------------------------------------
  
  ReqTestInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqTestInfo& from);
  void MergeFrom(const ReqTestInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.ReqTestInfo)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static ReqTestInfo* default_instance_;
};
// -------------------------------------------------------------------

class ResTestInfo : public ::google::protobuf::Message {
 public:
  ResTestInfo();
  virtual ~ResTestInfo();
  
  ResTestInfo(const ResTestInfo& from);
  
  inline ResTestInfo& operator=(const ResTestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResTestInfo& default_instance();
  
  void Swap(ResTestInfo* other);
  
  // implements Message ----------------------------------------------
  
  ResTestInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResTestInfo& from);
  void MergeFrom(const ResTestInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.ResTestInfo)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static ResTestInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqLogout : public ::google::protobuf::Message {
 public:
  ReqLogout();
  virtual ~ReqLogout();
  
  ReqLogout(const ReqLogout& from);
  
  inline ReqLogout& operator=(const ReqLogout& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLogout& default_instance();
  
  void Swap(ReqLogout* other);
  
  // implements Message ----------------------------------------------
  
  ReqLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLogout& from);
  void MergeFrom(const ReqLogout& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.ReqLogout)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static ReqLogout* default_instance_;
};
// -------------------------------------------------------------------

class ReqTestResponseTime : public ::google::protobuf::Message {
 public:
  ReqTestResponseTime();
  virtual ~ReqTestResponseTime();
  
  ReqTestResponseTime(const ReqTestResponseTime& from);
  
  inline ReqTestResponseTime& operator=(const ReqTestResponseTime& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqTestResponseTime& default_instance();
  
  void Swap(ReqTestResponseTime* other);
  
  // implements Message ----------------------------------------------
  
  ReqTestResponseTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqTestResponseTime& from);
  void MergeFrom(const ReqTestResponseTime& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 req_timestamp = 1;
  inline bool has_req_timestamp() const;
  inline void clear_req_timestamp();
  static const int kReqTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 req_timestamp() const;
  inline void set_req_timestamp(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.ReqTestResponseTime)
 private:
  inline void set_has_req_timestamp();
  inline void clear_has_req_timestamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 req_timestamp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static ReqTestResponseTime* default_instance_;
};
// -------------------------------------------------------------------

class ResTestResponseTime : public ::google::protobuf::Message {
 public:
  ResTestResponseTime();
  virtual ~ResTestResponseTime();
  
  ResTestResponseTime(const ResTestResponseTime& from);
  
  inline ResTestResponseTime& operator=(const ResTestResponseTime& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResTestResponseTime& default_instance();
  
  void Swap(ResTestResponseTime* other);
  
  // implements Message ----------------------------------------------
  
  ResTestResponseTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResTestResponseTime& from);
  void MergeFrom(const ResTestResponseTime& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 req_timestamp = 1;
  inline bool has_req_timestamp() const;
  inline void clear_req_timestamp();
  static const int kReqTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 req_timestamp() const;
  inline void set_req_timestamp(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.ResTestResponseTime)
 private:
  inline void set_has_req_timestamp();
  inline void clear_has_req_timestamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 req_timestamp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static ResTestResponseTime* default_instance_;
};
// -------------------------------------------------------------------

class NotifyKickout : public ::google::protobuf::Message {
 public:
  NotifyKickout();
  virtual ~NotifyKickout();
  
  NotifyKickout(const NotifyKickout& from);
  
  inline NotifyKickout& operator=(const NotifyKickout& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyKickout& default_instance();
  
  void Swap(NotifyKickout* other);
  
  // implements Message ----------------------------------------------
  
  NotifyKickout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyKickout& from);
  void MergeFrom(const NotifyKickout& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional sint32 kick_reason = 1;
  inline bool has_kick_reason() const;
  inline void clear_kick_reason();
  static const int kKickReasonFieldNumber = 1;
  inline ::google::protobuf::int32 kick_reason() const;
  inline void set_kick_reason(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.NotifyKickout)
 private:
  inline void set_has_kick_reason();
  inline void clear_has_kick_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 kick_reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static NotifyKickout* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg1 : public ::google::protobuf::Message {
 public:
  TestMsg1();
  virtual ~TestMsg1();
  
  TestMsg1(const TestMsg1& from);
  
  inline TestMsg1& operator=(const TestMsg1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg1& default_instance();
  
  void Swap(TestMsg1* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg1& from);
  void MergeFrom(const TestMsg1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg1)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg1* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg2 : public ::google::protobuf::Message {
 public:
  TestMsg2();
  virtual ~TestMsg2();
  
  TestMsg2(const TestMsg2& from);
  
  inline TestMsg2& operator=(const TestMsg2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg2& default_instance();
  
  void Swap(TestMsg2* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg2& from);
  void MergeFrom(const TestMsg2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg2)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg2* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg3 : public ::google::protobuf::Message {
 public:
  TestMsg3();
  virtual ~TestMsg3();
  
  TestMsg3(const TestMsg3& from);
  
  inline TestMsg3& operator=(const TestMsg3& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg3& default_instance();
  
  void Swap(TestMsg3* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg3& from);
  void MergeFrom(const TestMsg3& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg3)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg3* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg4 : public ::google::protobuf::Message {
 public:
  TestMsg4();
  virtual ~TestMsg4();
  
  TestMsg4(const TestMsg4& from);
  
  inline TestMsg4& operator=(const TestMsg4& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg4& default_instance();
  
  void Swap(TestMsg4* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg4* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg4& from);
  void MergeFrom(const TestMsg4& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg4)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg4* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg5 : public ::google::protobuf::Message {
 public:
  TestMsg5();
  virtual ~TestMsg5();
  
  TestMsg5(const TestMsg5& from);
  
  inline TestMsg5& operator=(const TestMsg5& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg5& default_instance();
  
  void Swap(TestMsg5* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg5* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg5& from);
  void MergeFrom(const TestMsg5& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg5)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg5* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg6 : public ::google::protobuf::Message {
 public:
  TestMsg6();
  virtual ~TestMsg6();
  
  TestMsg6(const TestMsg6& from);
  
  inline TestMsg6& operator=(const TestMsg6& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg6& default_instance();
  
  void Swap(TestMsg6* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg6* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg6& from);
  void MergeFrom(const TestMsg6& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg6)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg6* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg7 : public ::google::protobuf::Message {
 public:
  TestMsg7();
  virtual ~TestMsg7();
  
  TestMsg7(const TestMsg7& from);
  
  inline TestMsg7& operator=(const TestMsg7& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg7& default_instance();
  
  void Swap(TestMsg7* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg7* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg7& from);
  void MergeFrom(const TestMsg7& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg7)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg7* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg8 : public ::google::protobuf::Message {
 public:
  TestMsg8();
  virtual ~TestMsg8();
  
  TestMsg8(const TestMsg8& from);
  
  inline TestMsg8& operator=(const TestMsg8& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg8& default_instance();
  
  void Swap(TestMsg8* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg8* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg8& from);
  void MergeFrom(const TestMsg8& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg8)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg8* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg9 : public ::google::protobuf::Message {
 public:
  TestMsg9();
  virtual ~TestMsg9();
  
  TestMsg9(const TestMsg9& from);
  
  inline TestMsg9& operator=(const TestMsg9& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg9& default_instance();
  
  void Swap(TestMsg9* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg9* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg9& from);
  void MergeFrom(const TestMsg9& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg9)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg9* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg10 : public ::google::protobuf::Message {
 public:
  TestMsg10();
  virtual ~TestMsg10();
  
  TestMsg10(const TestMsg10& from);
  
  inline TestMsg10& operator=(const TestMsg10& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg10& default_instance();
  
  void Swap(TestMsg10* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg10* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg10& from);
  void MergeFrom(const TestMsg10& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg10)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg10* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg11 : public ::google::protobuf::Message {
 public:
  TestMsg11();
  virtual ~TestMsg11();
  
  TestMsg11(const TestMsg11& from);
  
  inline TestMsg11& operator=(const TestMsg11& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg11& default_instance();
  
  void Swap(TestMsg11* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg11* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg11& from);
  void MergeFrom(const TestMsg11& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg11)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg11* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg12 : public ::google::protobuf::Message {
 public:
  TestMsg12();
  virtual ~TestMsg12();
  
  TestMsg12(const TestMsg12& from);
  
  inline TestMsg12& operator=(const TestMsg12& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg12& default_instance();
  
  void Swap(TestMsg12* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg12* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg12& from);
  void MergeFrom(const TestMsg12& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg12)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg12* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg13 : public ::google::protobuf::Message {
 public:
  TestMsg13();
  virtual ~TestMsg13();
  
  TestMsg13(const TestMsg13& from);
  
  inline TestMsg13& operator=(const TestMsg13& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg13& default_instance();
  
  void Swap(TestMsg13* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg13* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg13& from);
  void MergeFrom(const TestMsg13& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg13)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg13* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg14 : public ::google::protobuf::Message {
 public:
  TestMsg14();
  virtual ~TestMsg14();
  
  TestMsg14(const TestMsg14& from);
  
  inline TestMsg14& operator=(const TestMsg14& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg14& default_instance();
  
  void Swap(TestMsg14* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg14* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg14& from);
  void MergeFrom(const TestMsg14& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg14)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg14* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg15 : public ::google::protobuf::Message {
 public:
  TestMsg15();
  virtual ~TestMsg15();
  
  TestMsg15(const TestMsg15& from);
  
  inline TestMsg15& operator=(const TestMsg15& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg15& default_instance();
  
  void Swap(TestMsg15* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg15* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg15& from);
  void MergeFrom(const TestMsg15& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg15)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg15* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg16 : public ::google::protobuf::Message {
 public:
  TestMsg16();
  virtual ~TestMsg16();
  
  TestMsg16(const TestMsg16& from);
  
  inline TestMsg16& operator=(const TestMsg16& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg16& default_instance();
  
  void Swap(TestMsg16* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg16* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg16& from);
  void MergeFrom(const TestMsg16& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg16)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg16* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg17 : public ::google::protobuf::Message {
 public:
  TestMsg17();
  virtual ~TestMsg17();
  
  TestMsg17(const TestMsg17& from);
  
  inline TestMsg17& operator=(const TestMsg17& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg17& default_instance();
  
  void Swap(TestMsg17* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg17* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg17& from);
  void MergeFrom(const TestMsg17& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg17)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg17* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg18 : public ::google::protobuf::Message {
 public:
  TestMsg18();
  virtual ~TestMsg18();
  
  TestMsg18(const TestMsg18& from);
  
  inline TestMsg18& operator=(const TestMsg18& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg18& default_instance();
  
  void Swap(TestMsg18* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg18* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg18& from);
  void MergeFrom(const TestMsg18& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg18)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg18* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg19 : public ::google::protobuf::Message {
 public:
  TestMsg19();
  virtual ~TestMsg19();
  
  TestMsg19(const TestMsg19& from);
  
  inline TestMsg19& operator=(const TestMsg19& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg19& default_instance();
  
  void Swap(TestMsg19* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg19* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg19& from);
  void MergeFrom(const TestMsg19& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg19)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg19* default_instance_;
};
// -------------------------------------------------------------------

class TestMsg20 : public ::google::protobuf::Message {
 public:
  TestMsg20();
  virtual ~TestMsg20();
  
  TestMsg20(const TestMsg20& from);
  
  inline TestMsg20& operator=(const TestMsg20& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg20& default_instance();
  
  void Swap(TestMsg20* other);
  
  // implements Message ----------------------------------------------
  
  TestMsg20* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg20& from);
  void MergeFrom(const TestMsg20& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline const ::std::string& test_data() const;
  inline void set_test_data(const ::std::string& value);
  inline void set_test_data(const char* value);
  inline void set_test_data(const void* value, size_t size);
  inline ::std::string* mutable_test_data();
  inline ::std::string* release_test_data();
  
  // @@protoc_insertion_point(class_scope:com.iod.pb.test.TestMsg20)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* test_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_iod_5ftest_2eproto();
  friend void protobuf_AssignDesc_iod_5ftest_2eproto();
  friend void protobuf_ShutdownFile_iod_5ftest_2eproto();
  
  void InitAsDefaultInstance();
  static TestMsg20* default_instance_;
};
// ===================================================================

static const int kIdReqAuthenticationFieldNumber = 1000;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ReqAuthentication >, 11, false >
  idReqAuthentication;
static const int kIdResAuthenticationFieldNumber = 1001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ResAuthentication >, 11, false >
  idResAuthentication;
static const int kIdReqLoginFieldNumber = 1002;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ReqLogin >, 11, false >
  idReqLogin;
static const int kIdResLoginFieldNumber = 1003;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ResLogin >, 11, false >
  idResLogin;
static const int kIdReqTestInfoFieldNumber = 1004;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ReqTestInfo >, 11, false >
  idReqTestInfo;
static const int kIdResTestInfoFieldNumber = 1005;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ResTestInfo >, 11, false >
  idResTestInfo;
static const int kIdReqLogoutFieldNumber = 1006;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ReqLogout >, 11, false >
  idReqLogout;
static const int kIdReqTestResponseTimeFieldNumber = 1007;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ReqTestResponseTime >, 11, false >
  idReqTestResponseTime;
static const int kIdResTestResponseTimeFieldNumber = 1008;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::ResTestResponseTime >, 11, false >
  idResTestResponseTime;
static const int kIdNotifyKickoutFieldNumber = 1009;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::NotifyKickout >, 11, false >
  idNotifyKickout;
static const int kIdTestMsg1FieldNumber = 5001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg1 >, 11, false >
  idTestMsg1;
static const int kIdTestMsg2FieldNumber = 5002;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg2 >, 11, false >
  idTestMsg2;
static const int kIdTestMsg3FieldNumber = 5003;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg3 >, 11, false >
  idTestMsg3;
static const int kIdTestMsg4FieldNumber = 5004;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg4 >, 11, false >
  idTestMsg4;
static const int kIdTestMsg5FieldNumber = 5005;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg5 >, 11, false >
  idTestMsg5;
static const int kIdTestMsg6FieldNumber = 5006;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg6 >, 11, false >
  idTestMsg6;
static const int kIdTestMsg7FieldNumber = 5007;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg7 >, 11, false >
  idTestMsg7;
static const int kIdTestMsg8FieldNumber = 5008;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg8 >, 11, false >
  idTestMsg8;
static const int kIdTestMsg9FieldNumber = 5009;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg9 >, 11, false >
  idTestMsg9;
static const int kIdTestMsg10FieldNumber = 5010;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg10 >, 11, false >
  idTestMsg10;
static const int kIdTestMsg11FieldNumber = 5011;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg11 >, 11, false >
  idTestMsg11;
static const int kIdTestMsg12FieldNumber = 5012;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg12 >, 11, false >
  idTestMsg12;
static const int kIdTestMsg13FieldNumber = 5013;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg13 >, 11, false >
  idTestMsg13;
static const int kIdTestMsg14FieldNumber = 5014;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg14 >, 11, false >
  idTestMsg14;
static const int kIdTestMsg15FieldNumber = 5015;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg15 >, 11, false >
  idTestMsg15;
static const int kIdTestMsg16FieldNumber = 5016;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg16 >, 11, false >
  idTestMsg16;
static const int kIdTestMsg17FieldNumber = 5017;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg17 >, 11, false >
  idTestMsg17;
static const int kIdTestMsg18FieldNumber = 5018;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg18 >, 11, false >
  idTestMsg18;
static const int kIdTestMsg19FieldNumber = 5019;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg19 >, 11, false >
  idTestMsg19;
static const int kIdTestMsg20FieldNumber = 5020;
extern ::google::protobuf::internal::ExtensionIdentifier< ::com::iod::pb::common::BaseMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::com::iod::pb::test::TestMsg20 >, 11, false >
  idTestMsg20;

// ===================================================================

// ReqAuthentication

// optional string user_id = 1;
inline bool ReqAuthentication::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAuthentication::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAuthentication::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAuthentication::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& ReqAuthentication::user_id() const {
  return *user_id_;
}
inline void ReqAuthentication::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void ReqAuthentication::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void ReqAuthentication::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqAuthentication::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* ReqAuthentication::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string authentication = 2;
inline bool ReqAuthentication::has_authentication() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAuthentication::set_has_authentication() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAuthentication::clear_has_authentication() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAuthentication::clear_authentication() {
  if (authentication_ != &::google::protobuf::internal::kEmptyString) {
    authentication_->clear();
  }
  clear_has_authentication();
}
inline const ::std::string& ReqAuthentication::authentication() const {
  return *authentication_;
}
inline void ReqAuthentication::set_authentication(const ::std::string& value) {
  set_has_authentication();
  if (authentication_ == &::google::protobuf::internal::kEmptyString) {
    authentication_ = new ::std::string;
  }
  authentication_->assign(value);
}
inline void ReqAuthentication::set_authentication(const char* value) {
  set_has_authentication();
  if (authentication_ == &::google::protobuf::internal::kEmptyString) {
    authentication_ = new ::std::string;
  }
  authentication_->assign(value);
}
inline void ReqAuthentication::set_authentication(const char* value, size_t size) {
  set_has_authentication();
  if (authentication_ == &::google::protobuf::internal::kEmptyString) {
    authentication_ = new ::std::string;
  }
  authentication_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqAuthentication::mutable_authentication() {
  set_has_authentication();
  if (authentication_ == &::google::protobuf::internal::kEmptyString) {
    authentication_ = new ::std::string;
  }
  return authentication_;
}
inline ::std::string* ReqAuthentication::release_authentication() {
  clear_has_authentication();
  if (authentication_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = authentication_;
    authentication_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ResAuthentication

// optional sint32 result = 1;
inline bool ResAuthentication::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResAuthentication::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResAuthentication::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResAuthentication::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ResAuthentication::result() const {
  return result_;
}
inline void ResAuthentication::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string authorization = 2;
inline bool ResAuthentication::has_authorization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResAuthentication::set_has_authorization() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResAuthentication::clear_has_authorization() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResAuthentication::clear_authorization() {
  if (authorization_ != &::google::protobuf::internal::kEmptyString) {
    authorization_->clear();
  }
  clear_has_authorization();
}
inline const ::std::string& ResAuthentication::authorization() const {
  return *authorization_;
}
inline void ResAuthentication::set_authorization(const ::std::string& value) {
  set_has_authorization();
  if (authorization_ == &::google::protobuf::internal::kEmptyString) {
    authorization_ = new ::std::string;
  }
  authorization_->assign(value);
}
inline void ResAuthentication::set_authorization(const char* value) {
  set_has_authorization();
  if (authorization_ == &::google::protobuf::internal::kEmptyString) {
    authorization_ = new ::std::string;
  }
  authorization_->assign(value);
}
inline void ResAuthentication::set_authorization(const char* value, size_t size) {
  set_has_authorization();
  if (authorization_ == &::google::protobuf::internal::kEmptyString) {
    authorization_ = new ::std::string;
  }
  authorization_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResAuthentication::mutable_authorization() {
  set_has_authorization();
  if (authorization_ == &::google::protobuf::internal::kEmptyString) {
    authorization_ = new ::std::string;
  }
  return authorization_;
}
inline ::std::string* ResAuthentication::release_authorization() {
  clear_has_authorization();
  if (authorization_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = authorization_;
    authorization_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReqLogin

// optional string user_id = 1;
inline bool ReqLogin::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqLogin::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqLogin::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqLogin::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& ReqLogin::user_id() const {
  return *user_id_;
}
inline void ReqLogin::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void ReqLogin::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void ReqLogin::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqLogin::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* ReqLogin::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string authorization = 2;
inline bool ReqLogin::has_authorization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqLogin::set_has_authorization() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqLogin::clear_has_authorization() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqLogin::clear_authorization() {
  if (authorization_ != &::google::protobuf::internal::kEmptyString) {
    authorization_->clear();
  }
  clear_has_authorization();
}
inline const ::std::string& ReqLogin::authorization() const {
  return *authorization_;
}
inline void ReqLogin::set_authorization(const ::std::string& value) {
  set_has_authorization();
  if (authorization_ == &::google::protobuf::internal::kEmptyString) {
    authorization_ = new ::std::string;
  }
  authorization_->assign(value);
}
inline void ReqLogin::set_authorization(const char* value) {
  set_has_authorization();
  if (authorization_ == &::google::protobuf::internal::kEmptyString) {
    authorization_ = new ::std::string;
  }
  authorization_->assign(value);
}
inline void ReqLogin::set_authorization(const char* value, size_t size) {
  set_has_authorization();
  if (authorization_ == &::google::protobuf::internal::kEmptyString) {
    authorization_ = new ::std::string;
  }
  authorization_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqLogin::mutable_authorization() {
  set_has_authorization();
  if (authorization_ == &::google::protobuf::internal::kEmptyString) {
    authorization_ = new ::std::string;
  }
  return authorization_;
}
inline ::std::string* ReqLogin::release_authorization() {
  clear_has_authorization();
  if (authorization_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = authorization_;
    authorization_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ResLogin

// optional string user_id = 1;
inline bool ResLogin::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResLogin::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResLogin::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResLogin::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& ResLogin::user_id() const {
  return *user_id_;
}
inline void ResLogin::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void ResLogin::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void ResLogin::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResLogin::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* ResLogin::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional sint32 result = 2;
inline bool ResLogin::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResLogin::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResLogin::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResLogin::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ResLogin::result() const {
  return result_;
}
inline void ResLogin::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ReqTestInfo

// optional string info = 1;
inline bool ReqTestInfo::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqTestInfo::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqTestInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqTestInfo::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& ReqTestInfo::info() const {
  return *info_;
}
inline void ReqTestInfo::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void ReqTestInfo::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void ReqTestInfo::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqTestInfo::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* ReqTestInfo::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ResTestInfo

// optional string info = 1;
inline bool ResTestInfo::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResTestInfo::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResTestInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResTestInfo::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& ResTestInfo::info() const {
  return *info_;
}
inline void ResTestInfo::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void ResTestInfo::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void ResTestInfo::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResTestInfo::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* ResTestInfo::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReqLogout

// -------------------------------------------------------------------

// ReqTestResponseTime

// required sint64 req_timestamp = 1;
inline bool ReqTestResponseTime::has_req_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqTestResponseTime::set_has_req_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqTestResponseTime::clear_has_req_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqTestResponseTime::clear_req_timestamp() {
  req_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_req_timestamp();
}
inline ::google::protobuf::int64 ReqTestResponseTime::req_timestamp() const {
  return req_timestamp_;
}
inline void ReqTestResponseTime::set_req_timestamp(::google::protobuf::int64 value) {
  set_has_req_timestamp();
  req_timestamp_ = value;
}

// -------------------------------------------------------------------

// ResTestResponseTime

// required sint64 req_timestamp = 1;
inline bool ResTestResponseTime::has_req_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResTestResponseTime::set_has_req_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResTestResponseTime::clear_has_req_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResTestResponseTime::clear_req_timestamp() {
  req_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_req_timestamp();
}
inline ::google::protobuf::int64 ResTestResponseTime::req_timestamp() const {
  return req_timestamp_;
}
inline void ResTestResponseTime::set_req_timestamp(::google::protobuf::int64 value) {
  set_has_req_timestamp();
  req_timestamp_ = value;
}

// -------------------------------------------------------------------

// NotifyKickout

// optional sint32 kick_reason = 1;
inline bool NotifyKickout::has_kick_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyKickout::set_has_kick_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyKickout::clear_has_kick_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyKickout::clear_kick_reason() {
  kick_reason_ = 0;
  clear_has_kick_reason();
}
inline ::google::protobuf::int32 NotifyKickout::kick_reason() const {
  return kick_reason_;
}
inline void NotifyKickout::set_kick_reason(::google::protobuf::int32 value) {
  set_has_kick_reason();
  kick_reason_ = value;
}

// -------------------------------------------------------------------

// TestMsg1

// optional bytes test_data = 1;
inline bool TestMsg1::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg1::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg1::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg1::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg1::test_data() const {
  return *test_data_;
}
inline void TestMsg1::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg1::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg1::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg1::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg1::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg2

// optional bytes test_data = 1;
inline bool TestMsg2::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg2::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg2::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg2::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg2::test_data() const {
  return *test_data_;
}
inline void TestMsg2::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg2::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg2::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg2::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg2::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg3

// optional bytes test_data = 1;
inline bool TestMsg3::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg3::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg3::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg3::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg3::test_data() const {
  return *test_data_;
}
inline void TestMsg3::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg3::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg3::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg3::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg3::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg4

// optional bytes test_data = 1;
inline bool TestMsg4::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg4::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg4::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg4::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg4::test_data() const {
  return *test_data_;
}
inline void TestMsg4::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg4::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg4::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg4::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg4::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg5

// optional bytes test_data = 1;
inline bool TestMsg5::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg5::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg5::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg5::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg5::test_data() const {
  return *test_data_;
}
inline void TestMsg5::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg5::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg5::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg5::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg5::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg6

// optional bytes test_data = 1;
inline bool TestMsg6::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg6::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg6::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg6::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg6::test_data() const {
  return *test_data_;
}
inline void TestMsg6::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg6::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg6::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg6::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg6::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg7

// optional bytes test_data = 1;
inline bool TestMsg7::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg7::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg7::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg7::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg7::test_data() const {
  return *test_data_;
}
inline void TestMsg7::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg7::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg7::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg7::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg7::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg8

// optional bytes test_data = 1;
inline bool TestMsg8::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg8::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg8::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg8::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg8::test_data() const {
  return *test_data_;
}
inline void TestMsg8::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg8::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg8::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg8::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg8::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg9

// optional bytes test_data = 1;
inline bool TestMsg9::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg9::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg9::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg9::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg9::test_data() const {
  return *test_data_;
}
inline void TestMsg9::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg9::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg9::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg9::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg9::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg10

// optional bytes test_data = 1;
inline bool TestMsg10::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg10::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg10::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg10::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg10::test_data() const {
  return *test_data_;
}
inline void TestMsg10::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg10::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg10::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg10::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg10::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg11

// optional bytes test_data = 1;
inline bool TestMsg11::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg11::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg11::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg11::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg11::test_data() const {
  return *test_data_;
}
inline void TestMsg11::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg11::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg11::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg11::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg11::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg12

// optional bytes test_data = 1;
inline bool TestMsg12::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg12::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg12::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg12::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg12::test_data() const {
  return *test_data_;
}
inline void TestMsg12::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg12::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg12::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg12::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg12::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg13

// optional bytes test_data = 1;
inline bool TestMsg13::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg13::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg13::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg13::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg13::test_data() const {
  return *test_data_;
}
inline void TestMsg13::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg13::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg13::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg13::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg13::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg14

// optional bytes test_data = 1;
inline bool TestMsg14::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg14::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg14::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg14::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg14::test_data() const {
  return *test_data_;
}
inline void TestMsg14::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg14::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg14::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg14::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg14::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg15

// optional bytes test_data = 1;
inline bool TestMsg15::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg15::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg15::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg15::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg15::test_data() const {
  return *test_data_;
}
inline void TestMsg15::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg15::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg15::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg15::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg15::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg16

// optional bytes test_data = 1;
inline bool TestMsg16::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg16::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg16::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg16::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg16::test_data() const {
  return *test_data_;
}
inline void TestMsg16::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg16::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg16::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg16::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg16::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg17

// optional bytes test_data = 1;
inline bool TestMsg17::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg17::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg17::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg17::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg17::test_data() const {
  return *test_data_;
}
inline void TestMsg17::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg17::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg17::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg17::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg17::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg18

// optional bytes test_data = 1;
inline bool TestMsg18::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg18::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg18::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg18::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg18::test_data() const {
  return *test_data_;
}
inline void TestMsg18::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg18::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg18::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg18::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg18::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg19

// optional bytes test_data = 1;
inline bool TestMsg19::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg19::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg19::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg19::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg19::test_data() const {
  return *test_data_;
}
inline void TestMsg19::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg19::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg19::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg19::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg19::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TestMsg20

// optional bytes test_data = 1;
inline bool TestMsg20::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg20::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg20::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg20::clear_test_data() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    test_data_->clear();
  }
  clear_has_test_data();
}
inline const ::std::string& TestMsg20::test_data() const {
  return *test_data_;
}
inline void TestMsg20::set_test_data(const ::std::string& value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg20::set_test_data(const char* value) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(value);
}
inline void TestMsg20::set_test_data(const void* value, size_t size) {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  test_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMsg20::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    test_data_ = new ::std::string;
  }
  return test_data_;
}
inline ::std::string* TestMsg20::release_test_data() {
  clear_has_test_data();
  if (test_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_data_;
    test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace pb
}  // namespace iod
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_iod_5ftest_2eproto__INCLUDED
